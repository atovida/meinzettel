(dp1
S'output'
p2
S"<type 'exceptions.WindowsError'> [Error 3] El sistema no puede encontrar la ruta especificada: 'D:/Dise\\xf1o Web/Proyectos/Parleyweb/web2py/applications/parleyweb/cron'"
p3
sS'layer'
p4
S'D:\\Dise\xf1o Web\\Proyectos\\Parleyweb\\web2py\\applications\\admin\\controllers/default.py'
p5
sS'code'
p6
S'# coding: utf8\n\nEXPERIMENTAL_STUFF = True\n\nif EXPERIMENTAL_STUFF:\n    is_mobile = request.user_agent().is_mobile\n    if is_mobile:\n        response.view = response.view.replace(\'default/\',\'default.mobile/\')\n        response.menu = []\n\nfrom gluon.admin import *\nfrom gluon.fileutils import abspath, read_file, write_file\nfrom glob import glob\nimport shutil\nimport platform\n\nif DEMO_MODE and request.function in [\'change_password\',\'pack\',\'pack_plugin\',\'upgrade_web2py\',\'uninstall\',\'cleanup\',\'compile_app\',\'remove_compiled_app\',\'delete\',\'delete_plugin\',\'create_file\',\'upload_file\',\'update_languages\',\'reload_routes\']:\n    session.flash = T(\'disabled in demo mode\')\n    redirect(URL(\'site\'))\n\nif not is_manager() and request.function in [\'change_password\',\'upgrade_web2py\']:\n    session.flash = T(\'disabled in multi user mode\')\n    redirect(URL(\'site\'))\n\nif FILTER_APPS and request.args(0) and not request.args(0) in FILTER_APPS:\n    session.flash = T(\'disabled in demo mode\')\n    redirect(URL(\'site\'))\n\ndef safe_open(a,b):\n    if DEMO_MODE and \'w\' in b:\n        class tmp:\n            def write(self,data): pass\n        return tmp()\n    return open(a,b)\n\ndef safe_read(a, b=\'r\'):\n    safe_file = safe_open(a, b)\n    try:\n        return safe_file.read()\n    finally:\n        safe_file.close()\n\ndef safe_write(a, value, b=\'w\'):\n    safe_file = safe_open(a, b)\n    try:\n        safe_file.write(value)\n    finally:\n        safe_file.close()\n\ndef get_app(name=None):\n    app = name or request.args(0)\n    if app and (not MULTI_USER_MODE or db(db.app.name==app)(db.app.owner==auth.user.id).count()):\n        return app\n    session.flash = \'App does not exist or your are not authorized\'\n    redirect(URL(\'site\'))\n\ndef index():\n    """ Index handler """\n\n    send = request.vars.send\n    if DEMO_MODE:\n        session.authorized = True\n        session.last_time = t0\n    if not send:\n        send = URL(\'site\')\n    if session.authorized:\n        redirect(send)\n    elif request.vars.password:\n        if verify_password(request.vars.password):\n            session.authorized = True\n            login_record(True)\n\n            if CHECK_VERSION:\n                session.check_version = True\n            else:\n                session.check_version = False\n\n            session.last_time = t0\n            if isinstance(send, list):  # ## why does this happen?\n                send = str(send[0])\n\n            redirect(send)\n        else:\n            times_denied = login_record(False)\n            if times_denied >= allowed_number_of_attempts:\n                response.flash = \\\n                    T(\'admin disabled because too many invalid login attempts\')\n            elif times_denied == allowed_number_of_attempts - 1:\n                response.flash = \\\n                    T(\'You have one more login attempt before you are locked out\')\n            else:\n                response.flash = T(\'invalid password.\')\n    return dict(send=send)\n\n\ndef check_version():\n    """ Checks if web2py is up to date """\n\n    session.forget()\n    session._unlock(response)\n\n    new_version, version_number = check_new_version(request.env.web2py_version,\n                                    WEB2PY_VERSION_URL)\n\n    if new_version == -1:\n        return A(T(\'Unable to check for upgrades\'), _href=WEB2PY_URL)\n    elif new_version != True:\n        return A(T(\'web2py is up to date\'), _href=WEB2PY_URL)\n    elif platform.system().lower() in (\'windows\',\'win32\',\'win64\') and os.path.exists("web2py.exe"):\n        return SPAN(\'You should upgrade to version %s\' % version_number)\n    else:\n        return sp_button(URL(\'upgrade_web2py\'), T(\'upgrade now\')) \\\n          + XML(\' <strong class="upgrade_version">%s</strong>\' % version_number)\n\n\ndef logout():\n    """ Logout handler """\n    session.authorized = None\n    if MULTI_USER_MODE:\n        redirect(URL(\'user/logout\'))\n    redirect(URL(\'index\'))\n\n\ndef change_password():\n\n    if session.pam_user:\n        session.flash = T(\'PAM authenticated user, cannot change password here\')\n        redirect(URL(\'site\'))\n    form=SQLFORM.factory(Field(\'current_admin_password\',\'password\'),\n                         Field(\'new_admin_password\',\'password\',requires=IS_STRONG()),\n                         Field(\'new_admin_password_again\',\'password\'))\n    if form.accepts(request.vars):\n        if not verify_password(request.vars.current_admin_password):\n            form.errors.current_admin_password = T(\'invalid password\')\n        elif form.vars.new_admin_password != form.vars.new_admin_password_again:\n            form.errors.new_admin_password_again = T(\'no match\')\n        else:\n            path = abspath(\'parameters_%s.py\' % request.env.server_port)\n            safe_write(path, \'password="%s"\' % CRYPT()(request.vars.new_admin_password)[0])\n            session.flash = T(\'password changed\')\n            redirect(URL(\'site\'))\n    return dict(form=form)\n\ndef site():\n    """ Site handler """\n\n    myversion = request.env.web2py_version\n\n    # Shortcut to make the elif statements more legible\n    file_or_appurl = \'file\' in request.vars or \'appurl\' in request.vars\n\n    if DEMO_MODE:\n        pass\n\n    elif request.vars.filename and not \'file\' in request.vars:\n        # create a new application\n        appname = cleanpath(request.vars.filename).replace(\'.\', \'_\')\n        if app_create(appname, request):\n            if MULTI_USER_MODE:\n                db.app.insert(name=appname,owner=auth.user.id)\n            session.flash = T(\'new application "%s" created\', appname)\n            redirect(URL(\'design\',args=appname))\n        else:\n            session.flash = \\\n                T(\'unable to create application "%s" (it may exist already)\', request.vars.filename)\n        redirect(URL(r=request))\n\n    elif file_or_appurl and not request.vars.filename:\n        # can\'t do anything without an app name\n        msg = \'you must specify a name for the uploaded application\'\n        response.flash = T(msg)\n\n    elif file_or_appurl and request.vars.filename:\n        # fetch an application via URL or file upload\n        f = None\n        if request.vars.appurl is not \'\':\n            try:\n                f = urllib.urlopen(request.vars.appurl)\n            except Exception, e:\n                session.flash = DIV(T(\'Unable to download app because:\'),PRE(str(e)))\n                redirect(URL(r=request))\n            fname = request.vars.appurl\n        elif request.vars.file is not \'\':\n            f = request.vars.file.file\n            fname = request.vars.file.filename\n\n        if f:\n            appname = cleanpath(request.vars.filename).replace(\'.\', \'_\')\n            installed = app_install(appname, f, request, fname,\n                                    overwrite=request.vars.overwrite_check)\n        if f and installed:\n            msg = \'application %(appname)s installed with md5sum: %(digest)s\'\n            session.flash = T(msg, dict(appname=appname,\n                                        digest=md5_hash(installed)))\n        elif f and request.vars.overwrite_check:\n            msg = \'unable to install application "%(appname)s"\'\n            session.flash = T(msg, dict(appname=request.vars.filename))\n\n        else:\n            msg = \'unable to install application "%(appname)s"\'\n            session.flash = T(msg, dict(appname=request.vars.filename))\n\n        redirect(URL(r=request))\n\n    regex = re.compile(\'^\\w+$\')\n\n    if is_manager():\n        apps = [f for f in os.listdir(apath(r=request)) if regex.match(f)]\n    else:\n        apps = [f.name for f in db(db.app.owner==auth.user_id).select()]\n\n    if FILTER_APPS:\n        apps = [f for f in apps if f in FILTER_APPS]\n\n    apps = sorted(apps,lambda a,b:cmp(a.upper(),b.upper()))\n\n    return dict(app=None, apps=apps, myversion=myversion)\n\n\ndef pack():\n    app = get_app()\n\n    if len(request.args) == 1:\n        fname = \'web2py.app.%s.w2p\' % app\n        filename = app_pack(app, request)\n    else:\n        fname = \'web2py.app.%s.compiled.w2p\' % app\n        filename = app_pack_compiled(app, request)\n\n    if filename:\n        response.headers[\'Content-Type\'] = \'application/w2p\'\n        disposition = \'attachment; filename=%s\' % fname\n        response.headers[\'Content-Disposition\'] = disposition\n        return safe_read(filename, \'rb\')\n    else:\n        session.flash = T(\'internal error\')\n        redirect(URL(\'site\'))\n\ndef pack_plugin():\n    app = get_app()\n    if len(request.args) == 2:\n        fname = \'web2py.plugin.%s.w2p\' % request.args[1]\n        filename = plugin_pack(app, request.args[1], request)\n    if filename:\n        response.headers[\'Content-Type\'] = \'application/w2p\'\n        disposition = \'attachment; filename=%s\' % fname\n        response.headers[\'Content-Disposition\'] = disposition\n        return safe_read(filename, \'rb\')\n    else:\n        session.flash = T(\'internal error\')\n        redirect(URL(\'plugin\',args=request.args))\n\ndef upgrade_web2py():\n    if \'upgrade\' in request.vars:\n        (success, error) = upgrade(request)\n        if success:\n            session.flash = T(\'web2py upgraded; please restart it\')\n        else:\n            session.flash = T(\'unable to upgrade because "%s"\', error)\n        redirect(URL(\'site\'))\n    elif \'noupgrade\' in request.vars:\n        redirect(URL(\'site\'))\n    return dict()\n\ndef uninstall():\n    app = get_app()\n    if \'delete\' in request.vars:\n        if MULTI_USER_MODE:\n            if is_manager() and db(db.app.name==app).delete():\n                pass\n            elif db(db.app.name==app)(db.app.owner==auth.user.id).delete():\n                pass\n            else:\n                session.flash = T(\'no permission to uninstall "%s"\', app)\n                redirect(URL(\'site\'))\n        if app_uninstall(app, request):\n            session.flash = T(\'application "%s" uninstalled\', app)\n        else:\n            session.flash = T(\'unable to uninstall "%s"\', app)\n        redirect(URL(\'site\'))\n    elif \'nodelete\' in request.vars:\n        redirect(URL(\'site\'))\n    return dict(app=app)\n\n\ndef cleanup():\n    app = get_app()\n    clean = app_cleanup(app, request)\n    if not clean:\n        session.flash = T("some files could not be removed")\n    else:\n        session.flash = T(\'cache, errors and sessions cleaned\')\n\n    redirect(URL(\'site\'))\n\n\ndef compile_app():\n    app = get_app()\n    c = app_compile(app, request)\n    if not c:\n        session.flash = T(\'application compiled\')\n    else:\n        session.flash = DIV(T(\'Cannot compile: there are errors in your app:\'),\n                              CODE(c))\n    redirect(URL(\'site\'))\n\n\ndef remove_compiled_app():\n    """ Remove the compiled application """\n    app = get_app()\n    remove_compiled_application(apath(app, r=request))\n    session.flash = T(\'compiled application removed\')\n    redirect(URL(\'site\'))\n\ndef delete():\n    """ Object delete handler """\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    sender = request.vars.sender\n\n    if isinstance(sender, list):  # ## fix a problem with Vista\n        sender = sender[0]\n\n    if \'nodelete\' in request.vars:\n        redirect(URL(sender))\n    elif \'delete\' in request.vars:\n        try:\n            os.unlink(apath(filename, r=request))\n            session.flash = T(\'file "%(filename)s" deleted\',\n                              dict(filename=filename))\n        except Exception:\n            session.flash = T(\'unable to delete file "%(filename)s"\',\n                              dict(filename=filename))\n        redirect(URL(sender))\n    return dict(filename=filename, sender=sender)\n\ndef enable():\n    app = get_app()\n    filename = os.path.join(apath(app, r=request),\'DISABLED\')\n    if os.path.exists(filename):\n        os.unlink(filename)\n        return SPAN(T(\'Disable\'),_style=\'color:green\')\n    else:\n        open(filename,\'wb\').write(time.ctime())\n        return SPAN(T(\'Enable\'),_style=\'color:red\')\n\ndef peek():\n    """ Visualize object code """\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    try:\n        data = safe_read(apath(filename, r=request)).replace(\'\\r\',\'\')\n    except IOError:\n        session.flash = T(\'file does not exist\')\n        redirect(URL(\'site\'))\n\n    extension = filename[filename.rfind(\'.\') + 1:].lower()\n\n    return dict(app=request.args[0],\n                filename=filename,\n                data=data,\n                extension=extension)\n\n\ndef test():\n    """ Execute controller tests """\n    app = get_app()\n    if len(request.args) > 1:\n        file = request.args[1]\n    else:\n        file = \'.*\\.py\'\n\n    controllers = listdir(apath(\'%s/controllers/\' % app, r=request), file + \'$\')\n\n    return dict(app=app, controllers=controllers)\n\ndef keepalive():\n    return \'\'\n\ndef search():\n    keywords=request.vars.keywords or \'\'\n    app = get_app()\n    def match(filename,keywords):\n        filename=os.path.join(apath(app, r=request),filename)\n        if keywords in read_file(filename,\'rb\'):\n            return True\n        return False\n    path = apath(request.args[0], r=request)\n    files1 = glob(os.path.join(path,\'*/*.py\'))\n    files2 = glob(os.path.join(path,\'*/*.html\'))\n    files3 = glob(os.path.join(path,\'*/*/*.html\'))\n    files=[x[len(path)+1:].replace(\'\\\\\',\'/\') for x in files1+files2+files3 if match(x,keywords)]\n    return response.json({\'files\':files})\n\ndef edit():\n    """ File edit handler """\n    # Load json only if it is ajax edited...\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    # Try to discover the file type\n    if filename[-3:] == \'.py\':\n        filetype = \'python\'\n    elif filename[-5:] == \'.html\':\n        filetype = \'html\'\n    elif filename[-5:] == \'.load\':\n        filetype = \'html\'\n    elif filename[-4:] == \'.css\':\n        filetype = \'css\'\n    elif filename[-3:] == \'.js\':\n        filetype = \'js\'\n    else:\n        filetype = \'html\'\n\n    # ## check if file is not there\n\n    path = apath(filename, r=request)\n\n    if (\'revert\' in request.vars) and os.path.exists(path + \'.bak\'):\n        try:\n            data = safe_read(path + \'.bak\')\n            data1 = safe_read(path)\n        except IOError:\n            session.flash = T(\'Invalid action\')\n            if \'from_ajax\' in request.vars:\n                 return response.json({\'error\': str(T(\'Invalid action\'))})\n            else:\n                redirect(URL(\'site\'))\n\n        safe_write(path, data)\n        file_hash = md5_hash(data)\n        saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n        safe_write(path + \'.bak\', data1)\n        response.flash = T(\'file "%s" of %s restored\', (filename, saved_on))\n    else:\n        try:\n            data = safe_read(path)\n        except IOError:\n            session.flash = T(\'Invalid action\')\n            if \'from_ajax\' in request.vars:\n                return response.json({\'error\': str(T(\'Invalid action\'))})\n            else:\n                redirect(URL(\'site\'))\n\n        file_hash = md5_hash(data)\n        saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n\n        if request.vars.file_hash and request.vars.file_hash != file_hash:\n            session.flash = T(\'file changed on disk\')\n            data = request.vars.data.replace(\'\\r\\n\', \'\\n\').strip() + \'\\n\'\n            safe_write(path + \'.1\', data)\n            if \'from_ajax\' in request.vars:\n                return response.json({\'error\': str(T(\'file changed on disk\')),\n                                      \'redirect\': URL(\'resolve\',\n                                                      args=request.args)})\n            else:\n                redirect(URL(\'resolve\', args=request.args))\n        elif request.vars.data:\n            safe_write(path + \'.bak\', data)\n            data = request.vars.data.replace(\'\\r\\n\', \'\\n\').strip() + \'\\n\'\n            safe_write(path, data)\n            file_hash = md5_hash(data)\n            saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n            response.flash = T(\'file saved on %s\', saved_on)\n\n    data_or_revert = (request.vars.data or request.vars.revert)\n\n    # Check compile errors\n    highlight = None\n    if filetype == \'python\' and request.vars.data:\n        import _ast\n        try:\n            code = request.vars.data.rstrip().replace(\'\\r\\n\',\'\\n\')+\'\\n\'\n            compile(code, path, "exec", _ast.PyCF_ONLY_AST)\n        except Exception, e:\n            start = sum([len(line)+1 for l, line\n                            in enumerate(request.vars.data.split("\\n"))\n                            if l < e.lineno-1])\n            if e.text and e.offset:\n                offset = e.offset - (len(e.text) - len(e.text.splitlines()[-1]))\n            else:\n                offset = 0\n            highlight = {\'start\': start, \'end\': start + offset + 1}\n            try:\n                ex_name = e.__class__.__name__\n            except:\n                ex_name = \'unknown exception!\'\n            response.flash = DIV(T(\'failed to compile file because:\'), BR(),\n                                 B(ex_name), T(\' at line %s\') % e.lineno,\n                                 offset and T(\' at char %s\') % offset or \'\',\n                                 PRE(str(e)))\n\n    if data_or_revert and request.args[1] == \'modules\':\n        # Lets try to reload the modules\n        try:\n            mopath = \'.\'.join(request.args[2:])[:-3]\n            exec \'import applications.%s.modules.%s\' % (request.args[0], mopath)\n            reload(sys.modules[\'applications.%s.modules.%s\'\n                    % (request.args[0], mopath)])\n        except Exception, e:\n            response.flash = DIV(T(\'failed to reload module because:\'),PRE(str(e)))\n\n    edit_controller = None\n    editviewlinks = None\n    view_link = None\n    if filetype == \'html\' and len(request.args) >= 3:\n        cfilename = os.path.join(request.args[0], \'controllers\',\n                                 request.args[2] + \'.py\')\n        if os.path.exists(apath(cfilename, r=request)):\n            edit_controller = URL(\'edit\', args=[cfilename])\n            view = request.args[3].replace(\'.html\',\'\')\n            view_link = URL(request.args[0],request.args[2],view)\n    elif filetype == \'python\' and request.args[1] == \'controllers\':\n        ## it\'s a controller file.\n        ## Create links to all of the associated view files.\n        app = get_app()\n        viewname = os.path.splitext(request.args[2])[0]\n        viewpath = os.path.join(app,\'views\',viewname)\n        aviewpath = apath(viewpath, r=request)\n        viewlist = []\n        if os.path.exists(aviewpath):\n            if os.path.isdir(aviewpath):\n                viewlist = glob(os.path.join(aviewpath,\'*.html\'))\n        elif os.path.exists(aviewpath+\'.html\'):\n            viewlist.append(aviewpath+\'.html\')\n        if len(viewlist):\n            editviewlinks = []\n            for v in viewlist:\n                vf = os.path.split(v)[-1]\n                vargs = "/".join([viewpath.replace(os.sep,"/"),vf])\n                editviewlinks.append(A(T(vf.split(".")[0]),\\\n                    _href=URL(\'edit\',args=[vargs])))\n\n    if len(request.args) > 2 and request.args[1] == \'controllers\':\n        controller = (request.args[2])[:-3]\n        functions = regex_expose.findall(data)\n    else:\n        (controller, functions) = (None, None)\n\n    if \'from_ajax\' in request.vars:\n        return response.json({\'file_hash\': file_hash, \'saved_on\': saved_on, \'functions\':functions, \'controller\': controller, \'application\': request.args[0], \'highlight\': highlight })\n    else:\n\n        editarea_preferences = {}\n        editarea_preferences[\'FONT_SIZE\'] = \'10\'\n        editarea_preferences[\'FULL_SCREEN\'] = \'false\'\n        editarea_preferences[\'ALLOW_TOGGLE\'] = \'true\'\n        editarea_preferences[\'REPLACE_TAB_BY_SPACES\'] = \'4\'\n        editarea_preferences[\'DISPLAY\'] = \'onload\'\n        for key in editarea_preferences:\n            if globals().has_key(key):\n                editarea_preferences[key]=globals()[key]\n        return dict(app=request.args[0],\n                    filename=filename,\n                    filetype=filetype,\n                    data=data,\n                    edit_controller=edit_controller,\n                    file_hash=file_hash,\n                    saved_on=saved_on,\n                    controller=controller,\n                    functions=functions,\n                    view_link=view_link,\n                    editarea_preferences=editarea_preferences,\n                    editviewlinks=editviewlinks)\n\ndef resolve():\n    """\n    """\n\n    filename = \'/\'.join(request.args)\n    # ## check if file is not there\n    path = apath(filename, r=request)\n    a = safe_read(path).split(\'\\n\')\n    try:\n        b = safe_read(path + \'.1\').split(\'\\n\')\n    except IOError:\n        session.flash = \'Other file, no longer there\'\n        redirect(URL(\'edit\', args=request.args))\n\n    d = difflib.ndiff(a, b)\n\n    def leading(line):\n        """  """\n\n        # TODO: we really need to comment this\n        z = \'\'\n        for (k, c) in enumerate(line):\n            if c == \' \':\n                z += \'&nbsp;\'\n            elif c == \' \\t\':\n                z += \'&nbsp;\'\n            elif k == 0 and c == \'?\':\n                pass\n            else:\n                break\n\n        return XML(z)\n\n    def getclass(item):\n        """ Determine item class """\n\n        if item[0] == \' \':\n            return \'normal\'\n        if item[0] == \'+\':\n            return \'plus\'\n        if item[0] == \'-\':\n            return \'minus\'\n\n    if request.vars:\n        c = \'\\n\'.join([item[2:].rstrip() for (i, item) in enumerate(d) if item[0] \\\n                           == \' \' or \'line%i\' % i in request.vars])\n        safe_write(path, c)\n        session.flash = \'files merged\'\n        redirect(URL(\'edit\', args=request.args))\n    else:\n        # Making the short circuit compatible with <= python2.4\n        gen_data = lambda index,item: not item[:1] in [\'+\',\'-\'] and "" \\\n                   or INPUT(_type=\'checkbox\',\n                            _name=\'line%i\' % index,\n                            value=item[0] == \'+\')\n\n        diff = TABLE(*[TR(TD(gen_data(i,item)),\n                          TD(item[0]),\n                          TD(leading(item[2:]),\n                          TT(item[2:].rstrip())), _class=getclass(item))\n                       for (i, item) in enumerate(d) if item[0] != \'?\'])\n\n    return dict(diff=diff, filename=filename)\n\n\ndef edit_language():\n    """ Edit language file """\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    from gluon.languages import read_dict, write_dict\n    strings = read_dict(apath(filename, r=request))\n    keys = sorted(strings.keys(),lambda x,y: cmp(x.lower(), y.lower()))\n    rows = []\n    rows.append(H2(T(\'Original/Translation\')))\n\n    for key in keys:\n        name = md5_hash(key)\n        if key==strings[key]:\n            _class=\'untranslated\'\n        else:\n            _class=\'translated\'\n        if len(key) <= 40:\n            elem = INPUT(_type=\'text\', _name=name,value=strings[key],\n                         _size=70,_class=_class)\n        else:\n            elem = TEXTAREA(_name=name, value=strings[key], _cols=70,\n                            _rows=5, _class=_class)\n\n        # Making the short circuit compatible with <= python2.4\n        k = (strings[key] != key) and key or B(key)\n\n        rows.append(P(k, BR(), elem, TAG.BUTTON(T(\'delete\'),\n                            _onclick=\'return delkey("%s")\' % name), _id=name))\n\n    rows.append(INPUT(_type=\'submit\', _value=T(\'update\')))\n    form = FORM(*rows)\n    if form.accepts(request.vars, keepvalues=True):\n        strs = dict()\n        for key in keys:\n            name = md5_hash(key)\n            if form.vars[name]==chr(127): continue\n            strs[key] = form.vars[name]\n        write_dict(apath(filename, r=request), strs)\n        session.flash = T(\'file saved on %(time)s\', dict(time=time.ctime()))\n        redirect(URL(r=request,args=request.args))\n    return dict(app=request.args[0], filename=filename, form=form)\n\n\ndef about():\n    """ Read about info """\n    app = get_app()\n    # ## check if file is not there\n    about = safe_read(apath(\'%s/ABOUT\' % app, r=request))\n    license = safe_read(apath(\'%s/LICENSE\' % app, r=request))\n    return dict(app=app, about=MARKMIN(about), license=MARKMIN(license))\n\n\ndef design():\n    """ Application design handler """\n    app = get_app()\n\n    if not response.flash and app == request.application:\n        msg = T(\'ATTENTION: you cannot edit the running application!\')\n        response.flash = msg\n\n    if request.vars.pluginfile!=None and not isinstance(request.vars.pluginfile,str):\n        filename=os.path.basename(request.vars.pluginfile.filename)\n        if plugin_install(app, request.vars.pluginfile.file,\n                          request, filename):\n            session.flash = T(\'new plugin installed\')\n            redirect(URL(\'design\',args=app))\n        else:\n            session.flash = \\\n                T(\'unable to create application "%s"\', request.vars.filename)\n        redirect(URL(r=request))\n    elif isinstance(request.vars.pluginfile,str):\n        session.flash = T(\'plugin not specified\')\n        redirect(URL(r=request))\n\n\n    # If we have only pyc files it means that\n    # we cannot design\n    if os.path.exists(apath(\'%s/compiled\' % app, r=request)):\n        session.flash = \\\n            T(\'application is compiled and cannot be designed\')\n        redirect(URL(\'site\'))\n\n    # Get all models\n    models = listdir(apath(\'%s/models/\' % app, r=request), \'.*\\.py$\')\n    models=[x.replace(\'\\\\\',\'/\') for x in models]\n    defines = {}\n    for m in models:\n        data = safe_read(apath(\'%s/models/%s\' % (app, m), r=request))\n        defines[m] = regex_tables.findall(data)\n        defines[m].sort()\n\n    # Get all controllers\n    controllers = sorted(listdir(apath(\'%s/controllers/\' % app, r=request), \'.*\\.py$\'))\n    controllers = [x.replace(\'\\\\\',\'/\') for x in controllers]\n    functions = {}\n    for c in controllers:\n        data = safe_read(apath(\'%s/controllers/%s\' % (app, c), r=request))\n        items = regex_expose.findall(data)\n        functions[c] = items\n\n    # Get all views\n    views = sorted(listdir(apath(\'%s/views/\' % app, r=request), \'[\\w/\\-]+(\\.\\w+)+$\'))\n    views = [x.replace(\'\\\\\',\'/\') for x in views if not x.endswith(\'.bak\')]\n    extend = {}\n    include = {}\n    for c in views:\n        data = safe_read(apath(\'%s/views/%s\' % (app, c), r=request))\n        items = regex_extend.findall(data)\n\n        if items:\n            extend[c] = items[0][1]\n\n        items = regex_include.findall(data)\n        include[c] = [i[1] for i in items]\n\n    # Get all modules\n    modules = listdir(apath(\'%s/modules/\' % app, r=request), \'.*\\.py$\')\n    modules = modules=[x.replace(\'\\\\\',\'/\') for x in modules]\n    modules.sort()\n\n    # Get all static files\n    statics = listdir(apath(\'%s/static/\' % app, r=request), \'[^\\.#].*\')\n    statics = [x.replace(\'\\\\\',\'/\') for x in statics]\n    statics.sort()\n\n    # Get all languages\n    languages = listdir(apath(\'%s/languages/\' % app, r=request), \'[\\w-]*\\.py\')\n\n    #Get crontab\n    cronfolder = apath(\'%s/cron\' % app, r=request)\n    if not os.path.exists(cronfolder): os.mkdir(cronfolder)\n    crontab = apath(\'%s/cron/crontab\' % app, r=request)\n    if not os.path.exists(crontab):\n        safe_write(crontab, \'#crontab\')\n\n    plugins=[]\n    def filter_plugins(items,plugins):\n        plugins+=[item[7:].split(\'/\')[0].split(\'.\')[0] for item in items if item.startswith(\'plugin_\')]\n        plugins[:]=list(set(plugins))\n        plugins.sort()\n        return [item for item in items if not item.startswith(\'plugin_\')]\n\n    return dict(app=app,\n                models=filter_plugins(models,plugins),\n                defines=defines,\n                controllers=filter_plugins(controllers,plugins),\n                functions=functions,\n                views=filter_plugins(views,plugins),\n                modules=filter_plugins(modules,plugins),\n                extend=extend,\n                include=include,\n                statics=filter_plugins(statics,plugins),\n                languages=languages,\n                crontab=crontab,\n                plugins=plugins)\n\ndef delete_plugin():\n    """ Object delete handler """\n    app=request.args(0)\n    plugin = request.args(1)\n    plugin_name=\'plugin_\'+plugin\n    if \'nodelete\' in request.vars:\n        redirect(URL(\'design\',args=app))\n    elif \'delete\' in request.vars:\n        try:\n            for folder in [\'models\',\'views\',\'controllers\',\'static\',\'modules\']:\n                path=os.path.join(apath(app,r=request),folder)\n                for item in os.listdir(path):\n                    if item.rsplit(\'.\',1)[0] == plugin_name:\n                        filename=os.path.join(path,item)\n                        if os.path.isdir(filename):\n                            shutil.rmtree(filename)\n                        else:\n                            os.unlink(filename)\n            session.flash = T(\'plugin "%(plugin)s" deleted\',\n                              dict(plugin=plugin))\n        except Exception:\n            session.flash = T(\'unable to delete file plugin "%(plugin)s"\',\n                              dict(plugin=plugin))\n        redirect(URL(\'design\',args=request.args(0)))\n    return dict(plugin=plugin)\n\ndef plugin():\n    """ Application design handler """\n    app = get_app()\n    plugin = request.args(1)\n\n    if not response.flash and app == request.application:\n        msg = T(\'ATTENTION: you cannot edit the running application!\')\n        response.flash = msg\n\n    # If we have only pyc files it means that\n    # we cannot design\n    if os.path.exists(apath(\'%s/compiled\' % app, r=request)):\n        session.flash = \\\n            T(\'application is compiled and cannot be designed\')\n        redirect(URL(\'site\'))\n\n    # Get all models\n    models = listdir(apath(\'%s/models/\' % app, r=request), \'.*\\.py$\')\n    models=[x.replace(\'\\\\\',\'/\') for x in models]\n    defines = {}\n    for m in models:\n        data = safe_read(apath(\'%s/models/%s\' % (app, m), r=request))\n        defines[m] = regex_tables.findall(data)\n        defines[m].sort()\n\n    # Get all controllers\n    controllers = sorted(listdir(apath(\'%s/controllers/\' % app, r=request), \'.*\\.py$\'))\n    controllers = [x.replace(\'\\\\\',\'/\') for x in controllers]\n    functions = {}\n    for c in controllers:\n        data = safe_read(apath(\'%s/controllers/%s\' % (app, c), r=request))\n        items = regex_expose.findall(data)\n        functions[c] = items\n\n    # Get all views\n    views = sorted(listdir(apath(\'%s/views/\' % app, r=request), \'[\\w/\\-]+\\.\\w+$\'))\n    views = [x.replace(\'\\\\\',\'/\') for x in views]\n    extend = {}\n    include = {}\n    for c in views:\n        data = safe_read(apath(\'%s/views/%s\' % (app, c), r=request))\n        items = regex_extend.findall(data)\n        if items:\n            extend[c] = items[0][1]\n\n        items = regex_include.findall(data)\n        include[c] = [i[1] for i in items]\n\n    # Get all modules\n    modules = listdir(apath(\'%s/modules/\' % app, r=request), \'.*\\.py$\')\n    modules = modules=[x.replace(\'\\\\\',\'/\') for x in modules]\n    modules.sort()\n\n    # Get all static files\n    statics = listdir(apath(\'%s/static/\' % app, r=request), \'[^\\.#].*\')\n    statics = [x.replace(\'\\\\\',\'/\') for x in statics]\n    statics.sort()\n\n    # Get all languages\n    languages = listdir(apath(\'%s/languages/\' % app, r=request), \'[\\w-]*\\.py\')\n\n    #Get crontab\n    crontab = apath(\'%s/cron/crontab\' % app, r=request)\n    if not os.path.exists(crontab):\n        safe_write(crontab, \'#crontab\')\n\n    def filter_plugins(items):\n        regex=re.compile(\'^plugin_\'+plugin+\'(/.*|\\..*)?$\')\n        return [item for item in items if regex.match(item)]\n\n    return dict(app=app,\n                models=filter_plugins(models),\n                defines=defines,\n                controllers=filter_plugins(controllers),\n                functions=functions,\n                views=filter_plugins(views),\n                modules=filter_plugins(modules),\n                extend=extend,\n                include=include,\n                statics=filter_plugins(statics),\n                languages=languages,\n                crontab=crontab)\n\n\ndef create_file():\n    """ Create files handler """\n    try:\n        app = get_app(name=request.vars.location.split(\'/\')[0])\n        path = apath(request.vars.location, r=request)\n        filename = re.sub(\'[^\\w./-]+\', \'_\', request.vars.filename)\n\n        if path[-11:] == \'/languages/\':\n            # Handle language files\n            if len(filename) == 0:\n                raise SyntaxError\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n            app = path.split(\'/\')[-3]\n            path=os.path.join(apath(app, r=request),\'languages\',filename)\n            if not os.path.exists(path):\n                safe_write(path, \'\')\n            findT(apath(app, r=request), filename[:-3])\n            session.flash = T(\'language file "%(filename)s" created/updated\',\n                              dict(filename=filename))\n            redirect(request.vars.sender)\n\n        elif path[-8:] == \'/models/\':\n            # Handle python models\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = \'# coding: utf8\\n\'\n\n        elif path[-13:] == \'/controllers/\':\n            # Handle python controllers\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = \'# coding: utf8\\n# %s\\ndef index(): return dict(message="hello from %s")\'\n            text = text % (T(\'try something like\'), filename)\n\n        elif path[-7:] == \'/views/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            # Handle template (html) views\n            if filename.find(\'.\')<0:\n                filename += \'.html\'\n            extension = filename.split(\'.\')[-1].lower()\n\n            if len(filename) == 5:\n                raise SyntaxError\n\n            msg = T(\'This is the %(filename)s template\',\n                    dict(filename=filename))\n            if extension == \'html\':\n                text = dedent("""\n                   {{extend \'layout.html\'}}\n                   <h1>%s</h1>\n                   {{=BEAUTIFY(response._vars)}}""" % msg)\n            else:\n                generic = os.path.join(path,\'generic.\'+extension)\n                if os.path.exists(generic):\n                    text = read_file(generic)\n                else:\n                    text = \'\'\n\n        elif path[-9:] == \'/modules/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            # Handle python module files\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = dedent("""\n                   #!/usr/bin/env python\n                   # coding: utf8\n                   from gluon import *\\n""")\n\n        elif path[-8:] == \'/static/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            text = \'\'\n        else:\n            redirect(request.vars.sender)\n\n        full_filename = os.path.join(path, filename)\n        dirpath = os.path.dirname(full_filename)\n\n        if not os.path.exists(dirpath):\n            os.makedirs(dirpath)\n\n        if os.path.exists(full_filename):\n            raise SyntaxError\n\n        safe_write(full_filename, text)\n        session.flash = T(\'file "%(filename)s" created\',\n                          dict(filename=full_filename[len(path):]))\n        redirect(URL(\'edit\',\n                 args=[os.path.join(request.vars.location, filename)]))\n    except Exception, e:\n        if not isinstance(e,HTTP):\n            session.flash = T(\'cannot create file\')\n\n    redirect(request.vars.sender)\n\n\ndef upload_file():\n    """ File uploading handler """\n\n    try:\n        filename = None\n        app = get_app(name=request.vars.location.split(\'/\')[0])\n        path = apath(request.vars.location, r=request)\n\n        if request.vars.filename:\n            filename = re.sub(\'[^\\w\\./]+\', \'_\', request.vars.filename)\n        else:\n            filename = os.path.split(request.vars.file.filename)[-1]\n\n        if path[-8:] == \'/models/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-9:] == \'/modules/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-13:] == \'/controllers/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-7:] == \'/views/\' and not filename[-5:] == \'.html\':\n            filename += \'.html\'\n\n        if path[-11:] == \'/languages/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        filename = os.path.join(path, filename)\n        dirpath = os.path.dirname(filename)\n\n        if not os.path.exists(dirpath):\n            os.makedirs(dirpath)\n\n        safe_write(filename, request.vars.file.file.read(), \'wb\')\n        session.flash = T(\'file "%(filename)s" uploaded\',\n                          dict(filename=filename[len(path):]))\n    except Exception:\n        if filename:\n            d = dict(filename = filename[len(path):])\n        else:\n            d = dict(filename = \'unkown\')\n        session.flash = T(\'cannot upload file "%(filename)s"\', d)\n\n    redirect(request.vars.sender)\n\n\ndef errors():\n    """ Error handler """\n    import operator\n    import os\n    import pickle\n    import hashlib\n\n    app = get_app()\n\n    method = request.args(1) or \'new\'\n    db_ready = {}\n    db_ready[\'status\'] = get_ticket_storage(app)\n    db_ready[\'errmessage\'] = "No ticket_storage.txt found under /private folder"\n    db_ready[\'errlink\'] = "http://web2py.com/books/default/chapter/29/13#Collecting-tickets"\n\n    if method == \'new\':\n        errors_path = apath(\'%s/errors\' % app, r=request)\n\n        delete_hashes = []\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                delete_hashes.append(item[7:])\n\n        hash2error = dict()\n\n        for fn in listdir(errors_path, \'^\\w.*\'):\n            fullpath = os.path.join(errors_path, fn)\n            if not os.path.isfile(fullpath): continue\n            try:\n                fullpath_file = open(fullpath, \'r\')\n                try:\n                    error = pickle.load(fullpath_file)\n                finally:\n                    fullpath_file.close()\n            except IOError:\n                continue\n\n            hash = hashlib.md5(error[\'traceback\']).hexdigest()\n\n            if hash in delete_hashes:\n                os.unlink(fullpath)\n            else:\n                try:\n                    hash2error[hash][\'count\'] += 1\n                except KeyError:\n                    error_lines = error[\'traceback\'].split("\\n")\n                    last_line = error_lines[-2]\n                    error_causer = os.path.split(error[\'layer\'])[1]\n                    hash2error[hash] = dict(count=1, pickel=error,\n                                            causer=error_causer,\n                                            last_line=last_line,\n                                            hash=hash,ticket=fn)\n\n        decorated = [(x[\'count\'], x) for x in hash2error.values()]\n        decorated.sort(key=operator.itemgetter(0), reverse=True)\n\n        return dict(errors = [x[1] for x in decorated], app=app, method=method, db_ready=db_ready)\n\n    elif method == \'dbnew\':\n        errors_path = apath(\'%s/errors\' % app, r=request)\n        tk_db, tk_table = get_ticket_storage(app)\n\n        delete_hashes = []\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                delete_hashes.append(item[7:])\n\n        hash2error = dict()\n\n        for fn in tk_db(tk_table.id>0).select():\n            try:\n                error = pickle.loads(fn.ticket_data)\n            except AttributeError:\n                tk_db(tk_table.id == fn.id).delete()\n                tk_db.commit()\n\n            hash = hashlib.md5(error[\'traceback\']).hexdigest()\n\n            if hash in delete_hashes:\n                tk_db(tk_table.id == fn.id).delete()\n                tk_db.commit()\n            else:\n                try:\n                    hash2error[\'hash\'][\'count\'] += 1\n                except KeyError:\n                    error_lines = error[\'traceback\'].split("\\n")\n                    last_line = error_lines[-2]\n                    error_causer = os.path.split(error[\'layer\'])[1]\n                    hash2error[hash] = dict(count=1, pickel=error,\n                                            causer=error_causer,\n                                            last_line=last_line,\n                                            hash=hash,ticket=fn.ticket_id)\n\n        decorated = [(x[\'count\'], x) for x in hash2error.values()]\n\n        decorated.sort(key=operator.itemgetter(0), reverse=True)\n\n        return dict(errors = [x[1] for x in decorated], app=app, method=method)\n\n    elif method == \'dbold\':\n        tk_db, tk_table = get_ticket_storage(app)\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                tk_db(tk_table.ticket_id == item[7:]).delete()\n                tk_db.commit()\n        tickets_ = tk_db(tk_table.id>0).select(tk_table.ticket_id, tk_table.created_datetime, orderby=~tk_table.created_datetime)\n        tickets = [row.ticket_id for row in tickets_]\n        times = dict([(row.ticket_id, row.created_datetime) for row in tickets_])\n\n        return dict(app=app, tickets=tickets, method=method, times=times)\n\n    else:\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                os.unlink(apath(\'%s/errors/%s\' % (app, item[7:]), r=request))\n        func = lambda p: os.stat(apath(\'%s/errors/%s\' % \\\n                                           (app, p), r=request)).st_mtime\n        tickets = sorted(listdir(apath(\'%s/errors/\' % app, r=request), \'^\\w.*\'),\n                         key=func,\n                         reverse=True)\n\n        return dict(app=app, tickets=tickets, method=method, db_ready=db_ready)\n\ndef get_ticket_storage(app):\n    private_folder = apath(\'%s/private\' % app, r=request)\n    ticket_file = os.path.join(private_folder, \'ticket_storage.txt\')\n    if os.path.exists(ticket_file):\n        db_string = open(ticket_file).read()\n        db_string = db_string.strip().replace(\'\\r\',\'\').replace(\'\\n\',\'\')\n    else:\n        return False\n    tickets_table = \'web2py_ticket\'\n    tablename = tickets_table + \'_\' + app\n    db_path = apath(\'%s/databases\' % app, r=request)\n    ticketsdb = DAL(db_string, folder=db_path, auto_import=True)\n    if not ticketsdb.get(tablename):\n        table = ticketsdb.define_table(\n                tablename,\n                Field(\'ticket_id\', length=100),\n                Field(\'ticket_data\', \'text\'),\n                Field(\'created_datetime\', \'datetime\'),\n                )\n    return ticketsdb , ticketsdb.get(tablename)\n\ndef make_link(path):\n    """ Create a link from a path """\n    tryFile = path.replace(\'\\\\\', \'/\')\n\n    if os.path.isabs(tryFile) and os.path.isfile(tryFile):\n        (folder, filename) = os.path.split(tryFile)\n        (base, ext) = os.path.splitext(filename)\n        app = get_app()\n\n        editable = {\'controllers\': \'.py\', \'models\': \'.py\', \'views\': \'.html\'}\n        for key in editable.keys():\n            check_extension = folder.endswith("%s/%s" % (app,key))\n            if ext.lower() == editable[key] and check_extension:\n                return A(\'"\' + tryFile + \'"\',\n                         _href=URL(r=request,\n                         f=\'edit/%s/%s/%s\' % (app, key, filename))).xml()\n    return \'\'\n\n\ndef make_links(traceback):\n    """ Make links using the given traceback """\n\n    lwords = traceback.split(\'"\')\n\n    # Making the short circuit compatible with <= python2.4\n    result = (len(lwords) != 0) and lwords[0] or \'\'\n\n    i = 1\n\n    while i < len(lwords):\n        link = make_link(lwords[i])\n\n        if link == \'\':\n            result += \'"\' + lwords[i]\n        else:\n            result += link\n\n            if i + 1 < len(lwords):\n                result += lwords[i + 1]\n                i = i + 1\n\n        i = i + 1\n\n    return result\n\n\nclass TRACEBACK(object):\n    """ Generate the traceback """\n\n    def __init__(self, text):\n        """ TRACEBACK constructor """\n\n        self.s = make_links(CODE(text).xml())\n\n    def xml(self):\n        """ Returns the xml """\n\n        return self.s\n\n\ndef ticket():\n    """ Ticket handler """\n\n    if len(request.args) != 2:\n        session.flash = T(\'invalid ticket\')\n        redirect(URL(\'site\'))\n\n    app = get_app()\n    myversion = request.env.web2py_version\n    ticket = request.args[1]\n    e = RestrictedError()\n    e.load(request, app, ticket)\n\n    return dict(app=app,\n                ticket=ticket,\n                output=e.output,\n                traceback=(e.traceback and TRACEBACK(e.traceback)),\n                snapshot=e.snapshot,\n                code=e.code,\n                layer=e.layer,\n                myversion=myversion)\n\ndef ticketdb():\n    """ Ticket handler """\n\n    if len(request.args) != 2:\n        session.flash = T(\'invalid ticket\')\n        redirect(URL(\'site\'))\n\n    app = get_app()\n    myversion = request.env.web2py_version\n    ticket = request.args[1]\n    e = RestrictedError()\n    request.tickets_db = get_ticket_storage(app)[0]\n    e.load(request, app, ticket)\n    response.view = \'default/ticket.html\'\n    return dict(app=app,\n                ticket=ticket,\n                output=e.output,\n                traceback=(e.traceback and TRACEBACK(e.traceback)),\n                snapshot=e.snapshot,\n                code=e.code,\n                layer=e.layer,\n                myversion=myversion)\n\ndef error():\n    """ Generate a ticket (for testing) """\n    raise RuntimeError(\'admin ticket generator at your service\')\n\ndef update_languages():\n    """ Update available languages """\n\n    app = get_app()\n    update_all_languages(apath(app, r=request))\n    session.flash = T(\'Language files (static strings) updated\')\n    redirect(URL(\'design\',args=app,anchor=\'languages\'))\n\n\ndef twitter():\n    session.forget()\n    session._unlock(response)\n    import gluon.tools\n    import gluon.contrib.simplejson as sj\n    try:\n        if TWITTER_HASH:\n            page = urllib.urlopen("http://search.twitter.com/search.json?q=%%40%s" % TWITTER_HASH).read()\n            data = sj.loads(page  , encoding="utf-8")[\'results\']\n            d = dict()\n            for e in data:\n                d[e["id"]] = e\n            r = reversed(sorted(d))\n            return dict(tweets = [d[k] for k in r])\n        else:\n            return \'disabled\'\n    except Exception, e:\n        return DIV(T(\'Unable to download because:\'),BR(),str(e))\n\n\ndef user():\n    if MULTI_USER_MODE:\n        if not db(db.auth_user).count():\n            auth.settings.registration_requires_approval = False\n        return dict(form=auth())\n    else:\n        return dict(form=T("Disabled"))\n\ndef reload_routes():\n    """ Reload routes.py """\n    import gluon.rewrite\n    gluon.rewrite.load()\n    redirect(URL(\'site\'))\n\n\n\nresponse._vars=response._caller(design)\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'winerror'
p12
S'3'
sS'__hash__'
p13
S"<method-wrapper '__hash__' of exceptions.WindowsError object at 0x068EC6F8>"
p14
sS'__setattr__'
p15
S"<method-wrapper '__setattr__' of exceptions.WindowsError object at 0x068EC6F8>"
p16
sS'__reduce_ex__'
p17
S'<built-in method __reduce_ex__ of exceptions.WindowsError object at 0x068EC6F8>'
p18
sS'__getslice__'
p19
S"<method-wrapper '__getslice__' of exceptions.WindowsError object at 0x068EC6F8>"
p20
sS'__getitem__'
p21
S"<method-wrapper '__getitem__' of exceptions.WindowsError object at 0x068EC6F8>"
p22
sS'__setstate__'
p23
S'<built-in method __setstate__ of exceptions.WindowsError object at 0x068EC6F8>'
p24
sS'__reduce__'
p25
S'<built-in method __reduce__ of exceptions.WindowsError object at 0x068EC6F8>'
p26
sS'__str__'
p27
S"<method-wrapper '__str__' of exceptions.WindowsError object at 0x068EC6F8>"
p28
sS'args'
p29
S"(3, 'El sistema no puede encontrar la ruta especificada')"
p30
sS'__getattribute__'
p31
S"<method-wrapper '__getattribute__' of exceptions.WindowsError object at 0x068EC6F8>"
p32
sS'__class__'
p33
S"<type 'exceptions.WindowsError'>"
p34
sS'filename'
p35
S"'D:/Dise\\xf1o Web/Proyectos/Parleyweb/web2py/applications/parleyweb/cron'"
p36
sS'__delattr__'
p37
S"<method-wrapper '__delattr__' of exceptions.WindowsError object at 0x068EC6F8>"
p38
sS'strerror'
p39
S"'El sistema no puede encontrar la ruta especificada'"
p40
sS'__repr__'
p41
S"<method-wrapper '__repr__' of exceptions.WindowsError object at 0x068EC6F8>"
p42
sS'errno'
p43
S'2'
sS'__dict__'
p44
S'{}'
p45
sS'__doc__'
p46
S"'MS-Windows OS system call failed.'"
p47
sS'__init__'
p48
S"<method-wrapper '__init__' of exceptions.WindowsError object at 0x068EC6F8>"
p49
sS'__new__'
p50
S'<built-in method __new__ of type object at 0x1E1CD5B8>'
p51
ssS'evalue'
p52
S"[Error 3] El sistema no puede encontrar la ruta especificada: 'D:/Dise\\xf1o Web/Proyectos/Parleyweb/web2py/applications/parleyweb/cron'"
p53
sS'request'
p54
ccopy_reg
_reconstructor
p55
(cgluon.html
BEAUTIFY
p56
c__builtin__
object
p57
NtRp58
(dp59
S'attributes'
p60
(dp61
sS'components'
p62
(lp63
g55
(cgluon.html
TABLE
p64
g57
NtRp65
(dp66
g60
(dp67
S'level'
p68
I5
ssS'parent'
p69
Nsg62
(lp70
g55
(cgluon.html
TR
p71
g57
NtRp72
(dp73
g60
(dp74
sg69
g65
sg62
(lp75
g55
(cgluon.html
TD
p76
g57
NtRp77
(dp78
g60
(dp79
S'_style'
p80
S'font-weight:bold;vertical-align:top'
p81
ssg69
g72
sg62
(lp82
S'ajax'
p83
asbag55
(g76
g57
NtRp84
(dp85
g60
(dp86
S'_valign'
p87
S'top'
p88
ssg69
g72
sg62
(lp89
S':'
asbag55
(g76
g57
NtRp90
(dp91
g60
(dp92
sg69
g72
sg62
(lp93
g55
(g56
g57
NtRp94
(dp95
g60
(dp96
g68
I5
ssg69
g90
sg62
(lp97
S'False'
p98
asbasbasbag55
(g71
g57
NtRp99
(dp100
g60
(dp101
sg69
g65
sg62
(lp102
g55
(g76
g57
NtRp103
(dp104
g60
(dp105
g80
g81
ssg69
g99
sg62
(lp106
S'application'
p107
asbag55
(g76
g57
NtRp108
(dp109
g60
(dp110
g87
g88
ssg69
g99
sg62
(lp111
S':'
asbag55
(g76
g57
NtRp112
(dp113
g60
(dp114
sg69
g99
sg62
(lp115
g55
(g56
g57
NtRp116
(dp117
g60
(dp118
g68
I5
ssg69
g112
sg62
(lp119
S'admin'
p120
asbasbasbag55
(g71
g57
NtRp121
(dp122
g60
(dp123
sg69
g65
sg62
(lp124
g55
(g76
g57
NtRp125
(dp126
g60
(dp127
g80
g81
ssg69
g121
sg62
(lp128
g29
asbag55
(g76
g57
NtRp129
(dp130
g60
(dp131
g87
g88
ssg69
g121
sg62
(lp132
S':'
asbag55
(g76
g57
NtRp133
(dp134
g60
(dp135
sg69
g121
sg62
(lp136
g55
(g56
g57
NtRp137
(dp138
g60
(dp139
g68
I5
ssg69
g133
sg62
(lp140
g55
(g64
g57
NtRp141
(dp142
g60
(dp143
g68
I4
ssg69
Nsg62
(lp144
g55
(g71
g57
NtRp145
(dp146
g60
(dp147
sg69
g141
sg62
(lp148
g55
(g76
g57
NtRp149
(dp150
g60
(dp151
sg69
g145
sg62
(lp152
g55
(g56
g57
NtRp153
(dp154
g60
(dp155
g68
I4
ssg69
g149
sg62
(lp156
S'parleyweb'
p157
asbasbasbasbasbasbasbag55
(g71
g57
NtRp158
(dp159
g60
(dp160
sg69
g65
sg62
(lp161
g55
(g76
g57
NtRp162
(dp163
g60
(dp164
g80
g81
ssg69
g158
sg62
(lp165
S'body'
p166
asbag55
(g76
g57
NtRp167
(dp168
g60
(dp169
g87
g88
ssg69
g158
sg62
(lp170
S':'
asbag55
(g76
g57
NtRp171
(dp172
g60
(dp173
sg69
g158
sg62
(lp174
g55
(g56
g57
NtRp175
(dp176
g60
(dp177
g68
I5
ssg69
g171
sg62
(lp178
S'<cStringIO.StringO object at 0x05E456A0>'
p179
asbasbasbag55
(g71
g57
NtRp180
(dp181
g60
(dp182
sg69
g65
sg62
(lp183
g55
(g76
g57
NtRp184
(dp185
g60
(dp186
g80
g81
ssg69
g180
sg62
(lp187
S'client'
p188
asbag55
(g76
g57
NtRp189
(dp190
g60
(dp191
g87
g88
ssg69
g180
sg62
(lp192
S':'
asbag55
(g76
g57
NtRp193
(dp194
g60
(dp195
sg69
g180
sg62
(lp196
g55
(g56
g57
NtRp197
(dp198
g60
(dp199
g68
I5
ssg69
g193
sg62
(lp200
S'127.0.0.1'
p201
asbasbasbag55
(g71
g57
NtRp202
(dp203
g60
(dp204
sg69
g65
sg62
(lp205
g55
(g76
g57
NtRp206
(dp207
g60
(dp208
g80
g81
ssg69
g202
sg62
(lp209
S'controller'
p210
asbag55
(g76
g57
NtRp211
(dp212
g60
(dp213
g87
g88
ssg69
g202
sg62
(lp214
S':'
asbag55
(g76
g57
NtRp215
(dp216
g60
(dp217
sg69
g202
sg62
(lp218
g55
(g56
g57
NtRp219
(dp220
g60
(dp221
g68
I5
ssg69
g215
sg62
(lp222
S'default'
p223
asbasbasbag55
(g71
g57
NtRp224
(dp225
g60
(dp226
sg69
g65
sg62
(lp227
g55
(g76
g57
NtRp228
(dp229
g60
(dp230
g80
g81
ssg69
g224
sg62
(lp231
S'cookies'
p232
asbag55
(g76
g57
NtRp233
(dp234
g60
(dp235
g87
g88
ssg69
g224
sg62
(lp236
S':'
asbag55
(g76
g57
NtRp237
(dp238
g60
(dp239
sg69
g224
sg62
(lp240
g55
(g56
g57
NtRp241
(dp242
g60
(dp243
g68
I5
ssg69
g237
sg62
(lp244
g55
(g64
g57
NtRp245
(dp246
g60
(dp247
g68
I4
ssg69
Nsg62
(lp248
g55
(g71
g57
NtRp249
(dp250
g60
(dp251
sg69
g245
sg62
(lp252
g55
(g76
g57
NtRp253
(dp254
g60
(dp255
g80
g81
ssg69
g249
sg62
(lp256
S'session_id_admin'
p257
asbag55
(g76
g57
NtRp258
(dp259
g60
(dp260
g87
g88
ssg69
g249
sg62
(lp261
S':'
asbag55
(g76
g57
NtRp262
(dp263
g60
(dp264
sg69
g249
sg62
(lp265
g55
(g56
g57
NtRp266
(dp267
g60
(dp268
g68
I4
ssg69
g262
sg62
(lp269
g55
(g64
g57
NtRp270
(dp271
g60
(dp272
g68
I3
ssg69
Nsg62
(lp273
g55
(g71
g57
NtRp274
(dp275
g60
(dp276
sg69
g270
sg62
(lp277
g55
(g76
g57
NtRp278
(dp279
g60
(dp280
g80
g81
ssg69
g274
sg62
(lp281
S'comment'
p282
asbag55
(g76
g57
NtRp283
(dp284
g60
(dp285
g87
g88
ssg69
g274
sg62
(lp286
S':'
asbag55
(g76
g57
NtRp287
(dp288
g60
(dp289
sg69
g274
sg62
(lp290
g55
(g56
g57
NtRp291
(dp292
g60
(dp293
g68
I3
ssg69
g287
sg62
(lp294
S''
asbasbasbag55
(g71
g57
NtRp295
(dp296
g60
(dp297
sg69
g270
sg62
(lp298
g55
(g76
g57
NtRp299
(dp300
g60
(dp301
g80
g81
ssg69
g295
sg62
(lp302
S'domain'
p303
asbag55
(g76
g57
NtRp304
(dp305
g60
(dp306
g87
g88
ssg69
g295
sg62
(lp307
S':'
asbag55
(g76
g57
NtRp308
(dp309
g60
(dp310
sg69
g295
sg62
(lp311
g55
(g56
g57
NtRp312
(dp313
g60
(dp314
g68
I3
ssg69
g308
sg62
(lp315
S''
asbasbasbag55
(g71
g57
NtRp316
(dp317
g60
(dp318
sg69
g270
sg62
(lp319
g55
(g76
g57
NtRp320
(dp321
g60
(dp322
g80
g81
ssg69
g316
sg62
(lp323
S'expires'
p324
asbag55
(g76
g57
NtRp325
(dp326
g60
(dp327
g87
g88
ssg69
g316
sg62
(lp328
S':'
asbag55
(g76
g57
NtRp329
(dp330
g60
(dp331
sg69
g316
sg62
(lp332
g55
(g56
g57
NtRp333
(dp334
g60
(dp335
g68
I3
ssg69
g329
sg62
(lp336
S''
asbasbasbag55
(g71
g57
NtRp337
(dp338
g60
(dp339
sg69
g270
sg62
(lp340
g55
(g76
g57
NtRp341
(dp342
g60
(dp343
g80
g81
ssg69
g337
sg62
(lp344
S'max-age'
p345
asbag55
(g76
g57
NtRp346
(dp347
g60
(dp348
g87
g88
ssg69
g337
sg62
(lp349
S':'
asbag55
(g76
g57
NtRp350
(dp351
g60
(dp352
sg69
g337
sg62
(lp353
g55
(g56
g57
NtRp354
(dp355
g60
(dp356
g68
I3
ssg69
g350
sg62
(lp357
S''
asbasbasbag55
(g71
g57
NtRp358
(dp359
g60
(dp360
sg69
g270
sg62
(lp361
g55
(g76
g57
NtRp362
(dp363
g60
(dp364
g80
g81
ssg69
g358
sg62
(lp365
S'path'
p366
asbag55
(g76
g57
NtRp367
(dp368
g60
(dp369
g87
g88
ssg69
g358
sg62
(lp370
S':'
asbag55
(g76
g57
NtRp371
(dp372
g60
(dp373
sg69
g358
sg62
(lp374
g55
(g56
g57
NtRp375
(dp376
g60
(dp377
g68
I3
ssg69
g371
sg62
(lp378
S''
asbasbasbag55
(g71
g57
NtRp379
(dp380
g60
(dp381
sg69
g270
sg62
(lp382
g55
(g76
g57
NtRp383
(dp384
g60
(dp385
g80
g81
ssg69
g379
sg62
(lp386
S'secure'
p387
asbag55
(g76
g57
NtRp388
(dp389
g60
(dp390
g87
g88
ssg69
g379
sg62
(lp391
S':'
asbag55
(g76
g57
NtRp392
(dp393
g60
(dp394
sg69
g379
sg62
(lp395
g55
(g56
g57
NtRp396
(dp397
g60
(dp398
g68
I3
ssg69
g392
sg62
(lp399
S''
asbasbasbag55
(g71
g57
NtRp400
(dp401
g60
(dp402
sg69
g270
sg62
(lp403
g55
(g76
g57
NtRp404
(dp405
g60
(dp406
g80
g81
ssg69
g400
sg62
(lp407
S'version'
p408
asbag55
(g76
g57
NtRp409
(dp410
g60
(dp411
g87
g88
ssg69
g400
sg62
(lp412
S':'
asbag55
(g76
g57
NtRp413
(dp414
g60
(dp415
sg69
g400
sg62
(lp416
g55
(g56
g57
NtRp417
(dp418
g60
(dp419
g68
I3
ssg69
g413
sg62
(lp420
S''
asbasbasbasbasbasbasbasbasbasbasbag55
(g71
g57
NtRp421
(dp422
g60
(dp423
sg69
g65
sg62
(lp424
g55
(g76
g57
NtRp425
(dp426
g60
(dp427
g80
g81
ssg69
g421
sg62
(lp428
S'env'
p429
asbag55
(g76
g57
NtRp430
(dp431
g60
(dp432
g87
g88
ssg69
g421
sg62
(lp433
S':'
asbag55
(g76
g57
NtRp434
(dp435
g60
(dp436
sg69
g421
sg62
(lp437
g55
(g56
g57
NtRp438
(dp439
g60
(dp440
g68
I5
ssg69
g434
sg62
(lp441
g55
(g64
g57
NtRp442
(dp443
g60
(dp444
g68
I4
ssg69
Nsg62
(lp445
g55
(g71
g57
NtRp446
(dp447
g60
(dp448
sg69
g442
sg62
(lp449
g55
(g76
g57
NtRp450
(dp451
g60
(dp452
g80
g81
ssg69
g446
sg62
(lp453
S'app_folders'
p454
asbag55
(g76
g57
NtRp455
(dp456
g60
(dp457
g87
g88
ssg69
g446
sg62
(lp458
S':'
asbag55
(g76
g57
NtRp459
(dp460
g60
(dp461
sg69
g446
sg62
(lp462
g55
(g56
g57
NtRp463
(dp464
g60
(dp465
g68
I4
ssg69
g459
sg62
(lp466
S"set(['D:\\\\Dise\\xf1o Web\\\\Proyectos\\\\Parleyweb\\\\web2py\\\\applications\\\\admin\\\\', 'D:\\\\Dise\\xf1o Web\\\\Proyectos\\\\Parleyweb\\\\web2py\\\\applications\\\\webparley\\\\'])"
p467
asbasbasbag55
(g71
g57
NtRp468
(dp469
g60
(dp470
sg69
g442
sg62
(lp471
g55
(g76
g57
NtRp472
(dp473
g60
(dp474
g80
g81
ssg69
g468
sg62
(lp475
S'applications_parent'
p476
asbag55
(g76
g57
NtRp477
(dp478
g60
(dp479
g87
g88
ssg69
g468
sg62
(lp480
S':'
asbag55
(g76
g57
NtRp481
(dp482
g60
(dp483
sg69
g468
sg62
(lp484
g55
(g56
g57
NtRp485
(dp486
g60
(dp487
g68
I4
ssg69
g481
sg62
(lp488
S'D:\\Dise\xf1o Web\\Proyectos\\Parleyweb\\web2py'
p489
asbasbasbag55
(g71
g57
NtRp490
(dp491
g60
(dp492
sg69
g442
sg62
(lp493
g55
(g76
g57
NtRp494
(dp495
g60
(dp496
g80
g81
ssg69
g490
sg62
(lp497
S'cmd_args'
p498
asbag55
(g76
g57
NtRp499
(dp500
g60
(dp501
g87
g88
ssg69
g490
sg62
(lp502
S':'
asbag55
(g76
g57
NtRp503
(dp504
g60
(dp505
sg69
g490
sg62
(lp506
g55
(g56
g57
NtRp507
(dp508
g60
(dp509
g68
I4
ssg69
g503
sg62
(lp510
g55
(g64
g57
NtRp511
(dp512
g60
(dp513
g68
I3
ssg69
Nsg62
(lp514
sbasbasbasbag55
(g71
g57
NtRp515
(dp516
g60
(dp517
sg69
g442
sg62
(lp518
g55
(g76
g57
NtRp519
(dp520
g60
(dp521
g80
g81
ssg69
g515
sg62
(lp522
S'cmd_options'
p523
asbag55
(g76
g57
NtRp524
(dp525
g60
(dp526
g87
g88
ssg69
g515
sg62
(lp527
S':'
asbag55
(g76
g57
NtRp528
(dp529
g60
(dp530
sg69
g515
sg62
(lp531
g55
(g56
g57
NtRp532
(dp533
g60
(dp534
g68
I4
ssg69
g528
sg62
(lp535
S"<Values at 0x2d6c260: {'verbose': False, 'ip': '127.0.0.1', 'shutdown_timeout': 5, 'taskbar': False, 'nocron': False, 'pid_filename': 'httpserver.pid', 'maxthreads': None, 'softcron': False, 'server_name': 'craxsnet-PC', 'bpython': False, 'nogui': False, 'port': 8000, 'extcron': False, 'debuglevel': 30, 'test': None, 'folder': 'D:\\\\Dise\\xf1o Web\\\\Proyectos\\\\Parleyweb\\\\web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'args': [''], 'socket_timeout': 5, 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'password': '<ask>', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'numthreads': None, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'plain': False, 'nobanner': False}>"
p536
asbasbasbag55
(g71
g57
NtRp537
(dp538
g60
(dp539
sg69
g442
sg62
(lp540
g55
(g76
g57
NtRp541
(dp542
g60
(dp543
g80
g81
ssg69
g537
sg62
(lp544
S'db_sessions'
p545
asbag55
(g76
g57
NtRp546
(dp547
g60
(dp548
g87
g88
ssg69
g537
sg62
(lp549
S':'
asbag55
(g76
g57
NtRp550
(dp551
g60
(dp552
sg69
g537
sg62
(lp553
g55
(g56
g57
NtRp554
(dp555
g60
(dp556
g68
I4
ssg69
g550
sg62
(lp557
S'set([])'
p558
asbasbasbag55
(g71
g57
NtRp559
(dp560
g60
(dp561
sg69
g442
sg62
(lp562
g55
(g76
g57
NtRp563
(dp564
g60
(dp565
g80
g81
ssg69
g559
sg62
(lp566
S'debugging'
p567
asbag55
(g76
g57
NtRp568
(dp569
g60
(dp570
g87
g88
ssg69
g559
sg62
(lp571
S':'
asbag55
(g76
g57
NtRp572
(dp573
g60
(dp574
sg69
g559
sg62
(lp575
g55
(g56
g57
NtRp576
(dp577
g60
(dp578
g68
I4
ssg69
g572
sg62
(lp579
g98
asbasbasbag55
(g71
g57
NtRp580
(dp581
g60
(dp582
sg69
g442
sg62
(lp583
g55
(g76
g57
NtRp584
(dp585
g60
(dp586
g80
g81
ssg69
g580
sg62
(lp587
S'gluon_parent'
p588
asbag55
(g76
g57
NtRp589
(dp590
g60
(dp591
g87
g88
ssg69
g580
sg62
(lp592
S':'
asbag55
(g76
g57
NtRp593
(dp594
g60
(dp595
sg69
g580
sg62
(lp596
g55
(g56
g57
NtRp597
(dp598
g60
(dp599
g68
I4
ssg69
g593
sg62
(lp600
S'D:\\Dise\xf1o Web\\Proyectos\\Parleyweb\\web2py'
p601
asbasbasbag55
(g71
g57
NtRp602
(dp603
g60
(dp604
sg69
g442
sg62
(lp605
g55
(g76
g57
NtRp606
(dp607
g60
(dp608
g80
g81
ssg69
g602
sg62
(lp609
S'http_accept'
p610
asbag55
(g76
g57
NtRp611
(dp612
g60
(dp613
g87
g88
ssg69
g602
sg62
(lp614
S':'
asbag55
(g76
g57
NtRp615
(dp616
g60
(dp617
sg69
g602
sg62
(lp618
g55
(g56
g57
NtRp619
(dp620
g60
(dp621
g68
I4
ssg69
g615
sg62
(lp622
S'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
p623
asbasbasbag55
(g71
g57
NtRp624
(dp625
g60
(dp626
sg69
g442
sg62
(lp627
g55
(g76
g57
NtRp628
(dp629
g60
(dp630
g80
g81
ssg69
g624
sg62
(lp631
S'http_accept_charset'
p632
asbag55
(g76
g57
NtRp633
(dp634
g60
(dp635
g87
g88
ssg69
g624
sg62
(lp636
S':'
asbag55
(g76
g57
NtRp637
(dp638
g60
(dp639
sg69
g624
sg62
(lp640
g55
(g56
g57
NtRp641
(dp642
g60
(dp643
g68
I4
ssg69
g637
sg62
(lp644
S'ISO-8859-1,utf-8;q=0.7,*;q=0.3'
p645
asbasbasbag55
(g71
g57
NtRp646
(dp647
g60
(dp648
sg69
g442
sg62
(lp649
g55
(g76
g57
NtRp650
(dp651
g60
(dp652
g80
g81
ssg69
g646
sg62
(lp653
S'http_accept_encoding'
p654
asbag55
(g76
g57
NtRp655
(dp656
g60
(dp657
g87
g88
ssg69
g646
sg62
(lp658
S':'
asbag55
(g76
g57
NtRp659
(dp660
g60
(dp661
sg69
g646
sg62
(lp662
g55
(g56
g57
NtRp663
(dp664
g60
(dp665
g68
I4
ssg69
g659
sg62
(lp666
S'gzip,deflate,sdch'
p667
asbasbasbag55
(g71
g57
NtRp668
(dp669
g60
(dp670
sg69
g442
sg62
(lp671
g55
(g76
g57
NtRp672
(dp673
g60
(dp674
g80
g81
ssg69
g668
sg62
(lp675
S'http_accept_language'
p676
asbag55
(g76
g57
NtRp677
(dp678
g60
(dp679
g87
g88
ssg69
g668
sg62
(lp680
S':'
asbag55
(g76
g57
NtRp681
(dp682
g60
(dp683
sg69
g668
sg62
(lp684
g55
(g56
g57
NtRp685
(dp686
g60
(dp687
g68
I4
ssg69
g681
sg62
(lp688
S'es-ES,es;q=0.8'
p689
asbasbasbag55
(g71
g57
NtRp690
(dp691
g60
(dp692
sg69
g442
sg62
(lp693
g55
(g76
g57
NtRp694
(dp695
g60
(dp696
g80
g81
ssg69
g690
sg62
(lp697
S'http_cache_control'
p698
asbag55
(g76
g57
NtRp699
(dp700
g60
(dp701
g87
g88
ssg69
g690
sg62
(lp702
S':'
asbag55
(g76
g57
NtRp703
(dp704
g60
(dp705
sg69
g690
sg62
(lp706
g55
(g56
g57
NtRp707
(dp708
g60
(dp709
g68
I4
ssg69
g703
sg62
(lp710
S'max-age=0'
p711
asbasbasbag55
(g71
g57
NtRp712
(dp713
g60
(dp714
sg69
g442
sg62
(lp715
g55
(g76
g57
NtRp716
(dp717
g60
(dp718
g80
g81
ssg69
g712
sg62
(lp719
S'http_connection'
p720
asbag55
(g76
g57
NtRp721
(dp722
g60
(dp723
g87
g88
ssg69
g712
sg62
(lp724
S':'
asbag55
(g76
g57
NtRp725
(dp726
g60
(dp727
sg69
g712
sg62
(lp728
g55
(g56
g57
NtRp729
(dp730
g60
(dp731
g68
I4
ssg69
g725
sg62
(lp732
S'keep-alive'
p733
asbasbasbag55
(g71
g57
NtRp734
(dp735
g60
(dp736
sg69
g442
sg62
(lp737
g55
(g76
g57
NtRp738
(dp739
g60
(dp740
g80
g81
ssg69
g734
sg62
(lp741
S'http_cookie'
p742
asbag55
(g76
g57
NtRp743
(dp744
g60
(dp745
g87
g88
ssg69
g734
sg62
(lp746
S':'
asbag55
(g76
g57
NtRp747
(dp748
g60
(dp749
sg69
g734
sg62
(lp750
g55
(g56
g57
NtRp751
(dp752
g60
(dp753
g68
I4
ssg69
g747
sg62
(lp754
S'session_id_admin=127.0.0.1-37b42d20-ebbb-45eb-85f7-127f903fe69a'
p755
asbasbasbag55
(g71
g57
NtRp756
(dp757
g60
(dp758
sg69
g442
sg62
(lp759
g55
(g76
g57
NtRp760
(dp761
g60
(dp762
g80
g81
ssg69
g756
sg62
(lp763
S'http_host'
p764
asbag55
(g76
g57
NtRp765
(dp766
g60
(dp767
g87
g88
ssg69
g756
sg62
(lp768
S':'
asbag55
(g76
g57
NtRp769
(dp770
g60
(dp771
sg69
g756
sg62
(lp772
g55
(g56
g57
NtRp773
(dp774
g60
(dp775
g68
I4
ssg69
g769
sg62
(lp776
S'127.0.0.1:8000'
p777
asbasbasbag55
(g71
g57
NtRp778
(dp779
g60
(dp780
sg69
g442
sg62
(lp781
g55
(g76
g57
NtRp782
(dp783
g60
(dp784
g80
g81
ssg69
g778
sg62
(lp785
S'http_referer'
p786
asbag55
(g76
g57
NtRp787
(dp788
g60
(dp789
g87
g88
ssg69
g778
sg62
(lp790
S':'
asbag55
(g76
g57
NtRp791
(dp792
g60
(dp793
sg69
g778
sg62
(lp794
g55
(g56
g57
NtRp795
(dp796
g60
(dp797
g68
I4
ssg69
g791
sg62
(lp798
S'http://127.0.0.1:8000/admin/default/index?send=%2Fadmin%2Fdefault%2Fdesign%2Fparleyweb'
p799
asbasbasbag55
(g71
g57
NtRp800
(dp801
g60
(dp802
sg69
g442
sg62
(lp803
g55
(g76
g57
NtRp804
(dp805
g60
(dp806
g80
g81
ssg69
g800
sg62
(lp807
S'http_user_agent'
p808
asbag55
(g76
g57
NtRp809
(dp810
g60
(dp811
g87
g88
ssg69
g800
sg62
(lp812
S':'
asbag55
(g76
g57
NtRp813
(dp814
g60
(dp815
sg69
g800
sg62
(lp816
g55
(g56
g57
NtRp817
(dp818
g60
(dp819
g68
I4
ssg69
g813
sg62
(lp820
S'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.79 Safari/535.11'
p821
asbasbasbag55
(g71
g57
NtRp822
(dp823
g60
(dp824
sg69
g442
sg62
(lp825
g55
(g76
g57
NtRp826
(dp827
g60
(dp828
g80
g81
ssg69
g822
sg62
(lp829
S'is_jython'
p830
asbag55
(g76
g57
NtRp831
(dp832
g60
(dp833
g87
g88
ssg69
g822
sg62
(lp834
S':'
asbag55
(g76
g57
NtRp835
(dp836
g60
(dp837
sg69
g822
sg62
(lp838
g55
(g56
g57
NtRp839
(dp840
g60
(dp841
g68
I4
ssg69
g835
sg62
(lp842
g98
asbasbasbag55
(g71
g57
NtRp843
(dp844
g60
(dp845
sg69
g442
sg62
(lp846
g55
(g76
g57
NtRp847
(dp848
g60
(dp849
g80
g81
ssg69
g843
sg62
(lp850
S'is_pypy'
p851
asbag55
(g76
g57
NtRp852
(dp853
g60
(dp854
g87
g88
ssg69
g843
sg62
(lp855
S':'
asbag55
(g76
g57
NtRp856
(dp857
g60
(dp858
sg69
g843
sg62
(lp859
g55
(g56
g57
NtRp860
(dp861
g60
(dp862
g68
I4
ssg69
g856
sg62
(lp863
g98
asbasbasbag55
(g71
g57
NtRp864
(dp865
g60
(dp866
sg69
g442
sg62
(lp867
g55
(g76
g57
NtRp868
(dp869
g60
(dp870
g80
g81
ssg69
g864
sg62
(lp871
S'path_info'
p872
asbag55
(g76
g57
NtRp873
(dp874
g60
(dp875
g87
g88
ssg69
g864
sg62
(lp876
S':'
asbag55
(g76
g57
NtRp877
(dp878
g60
(dp879
sg69
g864
sg62
(lp880
g55
(g56
g57
NtRp881
(dp882
g60
(dp883
g68
I4
ssg69
g877
sg62
(lp884
S'/admin/default/design/parleyweb'
p885
asbasbasbag55
(g71
g57
NtRp886
(dp887
g60
(dp888
sg69
g442
sg62
(lp889
g55
(g76
g57
NtRp890
(dp891
g60
(dp892
g80
g81
ssg69
g886
sg62
(lp893
S'query_string'
p894
asbag55
(g76
g57
NtRp895
(dp896
g60
(dp897
g87
g88
ssg69
g886
sg62
(lp898
S':'
asbag55
(g76
g57
NtRp899
(dp900
g60
(dp901
sg69
g886
sg62
(lp902
g55
(g56
g57
NtRp903
(dp904
g60
(dp905
g68
I4
ssg69
g899
sg62
(lp906
S''
asbasbasbag55
(g71
g57
NtRp907
(dp908
g60
(dp909
sg69
g442
sg62
(lp910
g55
(g76
g57
NtRp911
(dp912
g60
(dp913
g80
g81
ssg69
g907
sg62
(lp914
S'remote_addr'
p915
asbag55
(g76
g57
NtRp916
(dp917
g60
(dp918
g87
g88
ssg69
g907
sg62
(lp919
S':'
asbag55
(g76
g57
NtRp920
(dp921
g60
(dp922
sg69
g907
sg62
(lp923
g55
(g56
g57
NtRp924
(dp925
g60
(dp926
g68
I4
ssg69
g920
sg62
(lp927
g201
asbasbasbag55
(g71
g57
NtRp928
(dp929
g60
(dp930
sg69
g442
sg62
(lp931
g55
(g76
g57
NtRp932
(dp933
g60
(dp934
g80
g81
ssg69
g928
sg62
(lp935
S'remote_port'
p936
asbag55
(g76
g57
NtRp937
(dp938
g60
(dp939
g87
g88
ssg69
g928
sg62
(lp940
S':'
asbag55
(g76
g57
NtRp941
(dp942
g60
(dp943
sg69
g928
sg62
(lp944
g55
(g56
g57
NtRp945
(dp946
g60
(dp947
g68
I4
ssg69
g941
sg62
(lp948
S'53275'
p949
asbasbasbag55
(g71
g57
NtRp950
(dp951
g60
(dp952
sg69
g442
sg62
(lp953
g55
(g76
g57
NtRp954
(dp955
g60
(dp956
g80
g81
ssg69
g950
sg62
(lp957
S'request_method'
p958
asbag55
(g76
g57
NtRp959
(dp960
g60
(dp961
g87
g88
ssg69
g950
sg62
(lp962
S':'
asbag55
(g76
g57
NtRp963
(dp964
g60
(dp965
sg69
g950
sg62
(lp966
g55
(g56
g57
NtRp967
(dp968
g60
(dp969
g68
I4
ssg69
g963
sg62
(lp970
S'GET'
p971
asbasbasbag55
(g71
g57
NtRp972
(dp973
g60
(dp974
sg69
g442
sg62
(lp975
g55
(g76
g57
NtRp976
(dp977
g60
(dp978
g80
g81
ssg69
g972
sg62
(lp979
S'request_uri'
p980
asbag55
(g76
g57
NtRp981
(dp982
g60
(dp983
g87
g88
ssg69
g972
sg62
(lp984
S':'
asbag55
(g76
g57
NtRp985
(dp986
g60
(dp987
sg69
g972
sg62
(lp988
g55
(g56
g57
NtRp989
(dp990
g60
(dp991
g68
I4
ssg69
g985
sg62
(lp992
g885
asbasbasbag55
(g71
g57
NtRp993
(dp994
g60
(dp995
sg69
g442
sg62
(lp996
g55
(g76
g57
NtRp997
(dp998
g60
(dp999
g80
g81
ssg69
g993
sg62
(lp1000
S'script_name'
p1001
asbag55
(g76
g57
NtRp1002
(dp1003
g60
(dp1004
g87
g88
ssg69
g993
sg62
(lp1005
S':'
asbag55
(g76
g57
NtRp1006
(dp1007
g60
(dp1008
sg69
g993
sg62
(lp1009
g55
(g56
g57
NtRp1010
(dp1011
g60
(dp1012
g68
I4
ssg69
g1006
sg62
(lp1013
S''
asbasbasbag55
(g71
g57
NtRp1014
(dp1015
g60
(dp1016
sg69
g442
sg62
(lp1017
g55
(g76
g57
NtRp1018
(dp1019
g60
(dp1020
g80
g81
ssg69
g1014
sg62
(lp1021
S'server_name'
p1022
asbag55
(g76
g57
NtRp1023
(dp1024
g60
(dp1025
g87
g88
ssg69
g1014
sg62
(lp1026
S':'
asbag55
(g76
g57
NtRp1027
(dp1028
g60
(dp1029
sg69
g1014
sg62
(lp1030
g55
(g56
g57
NtRp1031
(dp1032
g60
(dp1033
g68
I4
ssg69
g1027
sg62
(lp1034
S'craxsnet-PC'
p1035
asbasbasbag55
(g71
g57
NtRp1036
(dp1037
g60
(dp1038
sg69
g442
sg62
(lp1039
g55
(g76
g57
NtRp1040
(dp1041
g60
(dp1042
g80
g81
ssg69
g1036
sg62
(lp1043
S'server_port'
p1044
asbag55
(g76
g57
NtRp1045
(dp1046
g60
(dp1047
g87
g88
ssg69
g1036
sg62
(lp1048
S':'
asbag55
(g76
g57
NtRp1049
(dp1050
g60
(dp1051
sg69
g1036
sg62
(lp1052
g55
(g56
g57
NtRp1053
(dp1054
g60
(dp1055
g68
I4
ssg69
g1049
sg62
(lp1056
S'8000'
p1057
asbasbasbag55
(g71
g57
NtRp1058
(dp1059
g60
(dp1060
sg69
g442
sg62
(lp1061
g55
(g76
g57
NtRp1062
(dp1063
g60
(dp1064
g80
g81
ssg69
g1058
sg62
(lp1065
S'server_protocol'
p1066
asbag55
(g76
g57
NtRp1067
(dp1068
g60
(dp1069
g87
g88
ssg69
g1058
sg62
(lp1070
S':'
asbag55
(g76
g57
NtRp1071
(dp1072
g60
(dp1073
sg69
g1058
sg62
(lp1074
g55
(g56
g57
NtRp1075
(dp1076
g60
(dp1077
g68
I4
ssg69
g1071
sg62
(lp1078
S'HTTP/1.1'
p1079
asbasbasbag55
(g71
g57
NtRp1080
(dp1081
g60
(dp1082
sg69
g442
sg62
(lp1083
g55
(g76
g57
NtRp1084
(dp1085
g60
(dp1086
g80
g81
ssg69
g1080
sg62
(lp1087
S'server_software'
p1088
asbag55
(g76
g57
NtRp1089
(dp1090
g60
(dp1091
g87
g88
ssg69
g1080
sg62
(lp1092
S':'
asbag55
(g76
g57
NtRp1093
(dp1094
g60
(dp1095
sg69
g1080
sg62
(lp1096
g55
(g56
g57
NtRp1097
(dp1098
g60
(dp1099
g68
I4
ssg69
g1093
sg62
(lp1100
S'Rocket 1.2.4'
p1101
asbasbasbag55
(g71
g57
NtRp1102
(dp1103
g60
(dp1104
sg69
g442
sg62
(lp1105
g55
(g76
g57
NtRp1106
(dp1107
g60
(dp1108
g80
g81
ssg69
g1102
sg62
(lp1109
S'web2py_crontype'
p1110
asbag55
(g76
g57
NtRp1111
(dp1112
g60
(dp1113
g87
g88
ssg69
g1102
sg62
(lp1114
S':'
asbag55
(g76
g57
NtRp1115
(dp1116
g60
(dp1117
sg69
g1102
sg62
(lp1118
g55
(g56
g57
NtRp1119
(dp1120
g60
(dp1121
g68
I4
ssg69
g1115
sg62
(lp1122
S'hard'
p1123
asbasbasbag55
(g71
g57
NtRp1124
(dp1125
g60
(dp1126
sg69
g442
sg62
(lp1127
g55
(g76
g57
NtRp1128
(dp1129
g60
(dp1130
g80
g81
ssg69
g1124
sg62
(lp1131
S'web2py_original_uri'
p1132
asbag55
(g76
g57
NtRp1133
(dp1134
g60
(dp1135
g87
g88
ssg69
g1124
sg62
(lp1136
S':'
asbag55
(g76
g57
NtRp1137
(dp1138
g60
(dp1139
sg69
g1124
sg62
(lp1140
g55
(g56
g57
NtRp1141
(dp1142
g60
(dp1143
g68
I4
ssg69
g1137
sg62
(lp1144
S'/admin/default/design/parleyweb'
p1145
asbasbasbag55
(g71
g57
NtRp1146
(dp1147
g60
(dp1148
sg69
g442
sg62
(lp1149
g55
(g76
g57
NtRp1150
(dp1151
g60
(dp1152
g80
g81
ssg69
g1146
sg62
(lp1153
S'web2py_path'
p1154
asbag55
(g76
g57
NtRp1155
(dp1156
g60
(dp1157
g87
g88
ssg69
g1146
sg62
(lp1158
S':'
asbag55
(g76
g57
NtRp1159
(dp1160
g60
(dp1161
sg69
g1146
sg62
(lp1162
g55
(g56
g57
NtRp1163
(dp1164
g60
(dp1165
g68
I4
ssg69
g1159
sg62
(lp1166
g489
asbasbasbag55
(g71
g57
NtRp1167
(dp1168
g60
(dp1169
sg69
g442
sg62
(lp1170
g55
(g76
g57
NtRp1171
(dp1172
g60
(dp1173
g80
g81
ssg69
g1167
sg62
(lp1174
S'web2py_version'
p1175
asbag55
(g76
g57
NtRp1176
(dp1177
g60
(dp1178
g87
g88
ssg69
g1167
sg62
(lp1179
S':'
asbag55
(g76
g57
NtRp1180
(dp1181
g60
(dp1182
sg69
g1167
sg62
(lp1183
g55
(g56
g57
NtRp1184
(dp1185
g60
(dp1186
g68
I4
ssg69
g1180
sg62
(lp1187
g55
(g64
g57
NtRp1188
(dp1189
g60
(dp1190
g68
I3
ssg69
Nsg62
(lp1191
g55
(g71
g57
NtRp1192
(dp1193
g60
(dp1194
sg69
g1188
sg62
(lp1195
g55
(g76
g57
NtRp1196
(dp1197
g60
(dp1198
sg69
g1192
sg62
(lp1199
g55
(g56
g57
NtRp1200
(dp1201
g60
(dp1202
g68
I3
ssg69
g1196
sg62
(lp1203
S'1'
asbasbasbag55
(g71
g57
NtRp1204
(dp1205
g60
(dp1206
sg69
g1188
sg62
(lp1207
g55
(g76
g57
NtRp1208
(dp1209
g60
(dp1210
sg69
g1204
sg62
(lp1211
g55
(g56
g57
NtRp1212
(dp1213
g60
(dp1214
g68
I3
ssg69
g1208
sg62
(lp1215
S'99'
p1216
asbasbasbag55
(g71
g57
NtRp1217
(dp1218
g60
(dp1219
sg69
g1188
sg62
(lp1220
g55
(g76
g57
NtRp1221
(dp1222
g60
(dp1223
sg69
g1217
sg62
(lp1224
g55
(g56
g57
NtRp1225
(dp1226
g60
(dp1227
g68
I3
ssg69
g1221
sg62
(lp1228
S'7'
asbasbasbag55
(g71
g57
NtRp1229
(dp1230
g60
(dp1231
sg69
g1188
sg62
(lp1232
g55
(g76
g57
NtRp1233
(dp1234
g60
(dp1235
sg69
g1229
sg62
(lp1236
g55
(g56
g57
NtRp1237
(dp1238
g60
(dp1239
g68
I3
ssg69
g1233
sg62
(lp1240
S'datetime.datetime(2012, 3, 4, 22, 12, 8)'
p1241
asbasbasbag55
(g71
g57
NtRp1242
(dp1243
g60
(dp1244
sg69
g1188
sg62
(lp1245
g55
(g76
g57
NtRp1246
(dp1247
g60
(dp1248
sg69
g1242
sg62
(lp1249
g55
(g56
g57
NtRp1250
(dp1251
g60
(dp1252
g68
I3
ssg69
g1246
sg62
(lp1253
S'stable'
p1254
asbasbasbasbasbasbasbag55
(g71
g57
NtRp1255
(dp1256
g60
(dp1257
sg69
g442
sg62
(lp1258
g55
(g76
g57
NtRp1259
(dp1260
g60
(dp1261
g80
g81
ssg69
g1255
sg62
(lp1262
S'wsgi_errors'
p1263
asbag55
(g76
g57
NtRp1264
(dp1265
g60
(dp1266
g87
g88
ssg69
g1255
sg62
(lp1267
S':'
asbag55
(g76
g57
NtRp1268
(dp1269
g60
(dp1270
sg69
g1255
sg62
(lp1271
g55
(g56
g57
NtRp1272
(dp1273
g60
(dp1274
g68
I4
ssg69
g1268
sg62
(lp1275
S"<open file '<stderr>', mode 'w' at 0x004200B0>"
p1276
asbasbasbag55
(g71
g57
NtRp1277
(dp1278
g60
(dp1279
sg69
g442
sg62
(lp1280
g55
(g76
g57
NtRp1281
(dp1282
g60
(dp1283
g80
g81
ssg69
g1277
sg62
(lp1284
S'wsgi_file_wrapper'
p1285
asbag55
(g76
g57
NtRp1286
(dp1287
g60
(dp1288
g87
g88
ssg69
g1277
sg62
(lp1289
S':'
asbag55
(g76
g57
NtRp1290
(dp1291
g60
(dp1292
sg69
g1277
sg62
(lp1293
g55
(g56
g57
NtRp1294
(dp1295
g60
(dp1296
g68
I4
ssg69
g1290
sg62
(lp1297
S'<class wsgiref.util.FileWrapper at 0x02B69390>'
p1298
asbasbasbag55
(g71
g57
NtRp1299
(dp1300
g60
(dp1301
sg69
g442
sg62
(lp1302
g55
(g76
g57
NtRp1303
(dp1304
g60
(dp1305
g80
g81
ssg69
g1299
sg62
(lp1306
S'wsgi_input'
p1307
asbag55
(g76
g57
NtRp1308
(dp1309
g60
(dp1310
g87
g88
ssg69
g1299
sg62
(lp1311
S':'
asbag55
(g76
g57
NtRp1312
(dp1313
g60
(dp1314
sg69
g1299
sg62
(lp1315
g55
(g56
g57
NtRp1316
(dp1317
g60
(dp1318
g68
I4
ssg69
g1312
sg62
(lp1319
S'<socket._fileobject object at 0x05CE35F0>'
p1320
asbasbasbag55
(g71
g57
NtRp1321
(dp1322
g60
(dp1323
sg69
g442
sg62
(lp1324
g55
(g76
g57
NtRp1325
(dp1326
g60
(dp1327
g80
g81
ssg69
g1321
sg62
(lp1328
S'wsgi_multiprocess'
p1329
asbag55
(g76
g57
NtRp1330
(dp1331
g60
(dp1332
g87
g88
ssg69
g1321
sg62
(lp1333
S':'
asbag55
(g76
g57
NtRp1334
(dp1335
g60
(dp1336
sg69
g1321
sg62
(lp1337
g55
(g56
g57
NtRp1338
(dp1339
g60
(dp1340
g68
I4
ssg69
g1334
sg62
(lp1341
g98
asbasbasbag55
(g71
g57
NtRp1342
(dp1343
g60
(dp1344
sg69
g442
sg62
(lp1345
g55
(g76
g57
NtRp1346
(dp1347
g60
(dp1348
g80
g81
ssg69
g1342
sg62
(lp1349
S'wsgi_multithread'
p1350
asbag55
(g76
g57
NtRp1351
(dp1352
g60
(dp1353
g87
g88
ssg69
g1342
sg62
(lp1354
S':'
asbag55
(g76
g57
NtRp1355
(dp1356
g60
(dp1357
sg69
g1342
sg62
(lp1358
g55
(g56
g57
NtRp1359
(dp1360
g60
(dp1361
g68
I4
ssg69
g1355
sg62
(lp1362
S'True'
p1363
asbasbasbag55
(g71
g57
NtRp1364
(dp1365
g60
(dp1366
sg69
g442
sg62
(lp1367
g55
(g76
g57
NtRp1368
(dp1369
g60
(dp1370
g80
g81
ssg69
g1364
sg62
(lp1371
S'wsgi_run_once'
p1372
asbag55
(g76
g57
NtRp1373
(dp1374
g60
(dp1375
g87
g88
ssg69
g1364
sg62
(lp1376
S':'
asbag55
(g76
g57
NtRp1377
(dp1378
g60
(dp1379
sg69
g1364
sg62
(lp1380
g55
(g56
g57
NtRp1381
(dp1382
g60
(dp1383
g68
I4
ssg69
g1377
sg62
(lp1384
g98
asbasbasbag55
(g71
g57
NtRp1385
(dp1386
g60
(dp1387
sg69
g442
sg62
(lp1388
g55
(g76
g57
NtRp1389
(dp1390
g60
(dp1391
g80
g81
ssg69
g1385
sg62
(lp1392
S'wsgi_url_scheme'
p1393
asbag55
(g76
g57
NtRp1394
(dp1395
g60
(dp1396
g87
g88
ssg69
g1385
sg62
(lp1397
S':'
asbag55
(g76
g57
NtRp1398
(dp1399
g60
(dp1400
sg69
g1385
sg62
(lp1401
g55
(g56
g57
NtRp1402
(dp1403
g60
(dp1404
g68
I4
ssg69
g1398
sg62
(lp1405
S'http'
p1406
asbasbasbag55
(g71
g57
NtRp1407
(dp1408
g60
(dp1409
sg69
g442
sg62
(lp1410
g55
(g76
g57
NtRp1411
(dp1412
g60
(dp1413
g80
g81
ssg69
g1407
sg62
(lp1414
S'wsgi_version'
p1415
asbag55
(g76
g57
NtRp1416
(dp1417
g60
(dp1418
g87
g88
ssg69
g1407
sg62
(lp1419
S':'
asbag55
(g76
g57
NtRp1420
(dp1421
g60
(dp1422
sg69
g1407
sg62
(lp1423
g55
(g56
g57
NtRp1424
(dp1425
g60
(dp1426
g68
I4
ssg69
g1420
sg62
(lp1427
g55
(g64
g57
NtRp1428
(dp1429
g60
(dp1430
g68
I3
ssg69
Nsg62
(lp1431
g55
(g71
g57
NtRp1432
(dp1433
g60
(dp1434
sg69
g1428
sg62
(lp1435
g55
(g76
g57
NtRp1436
(dp1437
g60
(dp1438
sg69
g1432
sg62
(lp1439
g55
(g56
g57
NtRp1440
(dp1441
g60
(dp1442
g68
I3
ssg69
g1436
sg62
(lp1443
S'1'
asbasbasbag55
(g71
g57
NtRp1444
(dp1445
g60
(dp1446
sg69
g1428
sg62
(lp1447
g55
(g76
g57
NtRp1448
(dp1449
g60
(dp1450
sg69
g1444
sg62
(lp1451
g55
(g56
g57
NtRp1452
(dp1453
g60
(dp1454
g68
I3
ssg69
g1448
sg62
(lp1455
S'0'
asbasbasbasbasbasbasbasbasbasbasbag55
(g71
g57
NtRp1456
(dp1457
g60
(dp1458
sg69
g65
sg62
(lp1459
g55
(g76
g57
NtRp1460
(dp1461
g60
(dp1462
g80
g81
ssg69
g1456
sg62
(lp1463
S'extension'
p1464
asbag55
(g76
g57
NtRp1465
(dp1466
g60
(dp1467
g87
g88
ssg69
g1456
sg62
(lp1468
S':'
asbag55
(g76
g57
NtRp1469
(dp1470
g60
(dp1471
sg69
g1456
sg62
(lp1472
g55
(g56
g57
NtRp1473
(dp1474
g60
(dp1475
g68
I5
ssg69
g1469
sg62
(lp1476
S'html'
p1477
asbasbasbag55
(g71
g57
NtRp1478
(dp1479
g60
(dp1480
sg69
g65
sg62
(lp1481
g55
(g76
g57
NtRp1482
(dp1483
g60
(dp1484
g80
g81
ssg69
g1478
sg62
(lp1485
S'folder'
p1486
asbag55
(g76
g57
NtRp1487
(dp1488
g60
(dp1489
g87
g88
ssg69
g1478
sg62
(lp1490
S':'
asbag55
(g76
g57
NtRp1491
(dp1492
g60
(dp1493
sg69
g1478
sg62
(lp1494
g55
(g56
g57
NtRp1495
(dp1496
g60
(dp1497
g68
I5
ssg69
g1491
sg62
(lp1498
S'D:\\Dise\xf1o Web\\Proyectos\\Parleyweb\\web2py\\applications\\admin\\'
p1499
asbasbasbag55
(g71
g57
NtRp1500
(dp1501
g60
(dp1502
sg69
g65
sg62
(lp1503
g55
(g76
g57
NtRp1504
(dp1505
g60
(dp1506
g80
g81
ssg69
g1500
sg62
(lp1507
S'function'
p1508
asbag55
(g76
g57
NtRp1509
(dp1510
g60
(dp1511
g87
g88
ssg69
g1500
sg62
(lp1512
S':'
asbag55
(g76
g57
NtRp1513
(dp1514
g60
(dp1515
sg69
g1500
sg62
(lp1516
g55
(g56
g57
NtRp1517
(dp1518
g60
(dp1519
g68
I5
ssg69
g1513
sg62
(lp1520
S'design'
p1521
asbasbasbag55
(g71
g57
NtRp1522
(dp1523
g60
(dp1524
sg69
g65
sg62
(lp1525
g55
(g76
g57
NtRp1526
(dp1527
g60
(dp1528
g80
g81
ssg69
g1522
sg62
(lp1529
S'get_vars'
p1530
asbag55
(g76
g57
NtRp1531
(dp1532
g60
(dp1533
g87
g88
ssg69
g1522
sg62
(lp1534
S':'
asbag55
(g76
g57
NtRp1535
(dp1536
g60
(dp1537
sg69
g1522
sg62
(lp1538
g55
(g56
g57
NtRp1539
(dp1540
g60
(dp1541
g68
I5
ssg69
g1535
sg62
(lp1542
g55
(g64
g57
NtRp1543
(dp1544
g60
(dp1545
g68
I4
ssg69
Nsg62
(lp1546
sbasbasbasbag55
(g71
g57
NtRp1547
(dp1548
g60
(dp1549
sg69
g65
sg62
(lp1550
g55
(g76
g57
NtRp1551
(dp1552
g60
(dp1553
g80
g81
ssg69
g1547
sg62
(lp1554
S'global_settings'
p1555
asbag55
(g76
g57
NtRp1556
(dp1557
g60
(dp1558
g87
g88
ssg69
g1547
sg62
(lp1559
S':'
asbag55
(g76
g57
NtRp1560
(dp1561
g60
(dp1562
sg69
g1547
sg62
(lp1563
g55
(g56
g57
NtRp1564
(dp1565
g60
(dp1566
g68
I5
ssg69
g1560
sg62
(lp1567
g55
(g64
g57
NtRp1568
(dp1569
g60
(dp1570
g68
I4
ssg69
Nsg62
(lp1571
g55
(g71
g57
NtRp1572
(dp1573
g60
(dp1574
sg69
g1568
sg62
(lp1575
g55
(g76
g57
NtRp1576
(dp1577
g60
(dp1578
g80
g81
ssg69
g1572
sg62
(lp1579
g454
asbag55
(g76
g57
NtRp1580
(dp1581
g60
(dp1582
g87
g88
ssg69
g1572
sg62
(lp1583
S':'
asbag55
(g76
g57
NtRp1584
(dp1585
g60
(dp1586
sg69
g1572
sg62
(lp1587
g55
(g56
g57
NtRp1588
(dp1589
g60
(dp1590
g68
I4
ssg69
g1584
sg62
(lp1591
S"set(['D:\\\\Dise\\xf1o Web\\\\Proyectos\\\\Parleyweb\\\\web2py\\\\applications\\\\admin\\\\', 'D:\\\\Dise\\xf1o Web\\\\Proyectos\\\\Parleyweb\\\\web2py\\\\applications\\\\webparley\\\\'])"
p1592
asbasbasbag55
(g71
g57
NtRp1593
(dp1594
g60
(dp1595
sg69
g1568
sg62
(lp1596
g55
(g76
g57
NtRp1597
(dp1598
g60
(dp1599
g80
g81
ssg69
g1593
sg62
(lp1600
g476
asbag55
(g76
g57
NtRp1601
(dp1602
g60
(dp1603
g87
g88
ssg69
g1593
sg62
(lp1604
S':'
asbag55
(g76
g57
NtRp1605
(dp1606
g60
(dp1607
sg69
g1593
sg62
(lp1608
g55
(g56
g57
NtRp1609
(dp1610
g60
(dp1611
g68
I4
ssg69
g1605
sg62
(lp1612
g489
asbasbasbag55
(g71
g57
NtRp1613
(dp1614
g60
(dp1615
sg69
g1568
sg62
(lp1616
g55
(g76
g57
NtRp1617
(dp1618
g60
(dp1619
g80
g81
ssg69
g1613
sg62
(lp1620
g498
asbag55
(g76
g57
NtRp1621
(dp1622
g60
(dp1623
g87
g88
ssg69
g1613
sg62
(lp1624
S':'
asbag55
(g76
g57
NtRp1625
(dp1626
g60
(dp1627
sg69
g1613
sg62
(lp1628
g55
(g56
g57
NtRp1629
(dp1630
g60
(dp1631
g68
I4
ssg69
g1625
sg62
(lp1632
g55
(g64
g57
NtRp1633
(dp1634
g60
(dp1635
g68
I3
ssg69
Nsg62
(lp1636
sbasbasbasbag55
(g71
g57
NtRp1637
(dp1638
g60
(dp1639
sg69
g1568
sg62
(lp1640
g55
(g76
g57
NtRp1641
(dp1642
g60
(dp1643
g80
g81
ssg69
g1637
sg62
(lp1644
g523
asbag55
(g76
g57
NtRp1645
(dp1646
g60
(dp1647
g87
g88
ssg69
g1637
sg62
(lp1648
S':'
asbag55
(g76
g57
NtRp1649
(dp1650
g60
(dp1651
sg69
g1637
sg62
(lp1652
g55
(g56
g57
NtRp1653
(dp1654
g60
(dp1655
g68
I4
ssg69
g1649
sg62
(lp1656
S"<Values at 0x2d6c260: {'verbose': False, 'ip': '127.0.0.1', 'shutdown_timeout': 5, 'taskbar': False, 'nocron': False, 'pid_filename': 'httpserver.pid', 'maxthreads': None, 'softcron': False, 'server_name': 'craxsnet-PC', 'bpython': False, 'nogui': False, 'port': 8000, 'extcron': False, 'debuglevel': 30, 'test': None, 'folder': 'D:\\\\Dise\\xf1o Web\\\\Proyectos\\\\Parleyweb\\\\web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'args': [''], 'socket_timeout': 5, 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'password': '<ask>', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'numthreads': None, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'plain': False, 'nobanner': False}>"
p1657
asbasbasbag55
(g71
g57
NtRp1658
(dp1659
g60
(dp1660
sg69
g1568
sg62
(lp1661
g55
(g76
g57
NtRp1662
(dp1663
g60
(dp1664
g80
g81
ssg69
g1658
sg62
(lp1665
g545
asbag55
(g76
g57
NtRp1666
(dp1667
g60
(dp1668
g87
g88
ssg69
g1658
sg62
(lp1669
S':'
asbag55
(g76
g57
NtRp1670
(dp1671
g60
(dp1672
sg69
g1658
sg62
(lp1673
g55
(g56
g57
NtRp1674
(dp1675
g60
(dp1676
g68
I4
ssg69
g1670
sg62
(lp1677
S'set([])'
p1678
asbasbasbag55
(g71
g57
NtRp1679
(dp1680
g60
(dp1681
sg69
g1568
sg62
(lp1682
g55
(g76
g57
NtRp1683
(dp1684
g60
(dp1685
g80
g81
ssg69
g1679
sg62
(lp1686
g567
asbag55
(g76
g57
NtRp1687
(dp1688
g60
(dp1689
g87
g88
ssg69
g1679
sg62
(lp1690
S':'
asbag55
(g76
g57
NtRp1691
(dp1692
g60
(dp1693
sg69
g1679
sg62
(lp1694
g55
(g56
g57
NtRp1695
(dp1696
g60
(dp1697
g68
I4
ssg69
g1691
sg62
(lp1698
g98
asbasbasbag55
(g71
g57
NtRp1699
(dp1700
g60
(dp1701
sg69
g1568
sg62
(lp1702
g55
(g76
g57
NtRp1703
(dp1704
g60
(dp1705
g80
g81
ssg69
g1699
sg62
(lp1706
g588
asbag55
(g76
g57
NtRp1707
(dp1708
g60
(dp1709
g87
g88
ssg69
g1699
sg62
(lp1710
S':'
asbag55
(g76
g57
NtRp1711
(dp1712
g60
(dp1713
sg69
g1699
sg62
(lp1714
g55
(g56
g57
NtRp1715
(dp1716
g60
(dp1717
g68
I4
ssg69
g1711
sg62
(lp1718
g601
asbasbasbag55
(g71
g57
NtRp1719
(dp1720
g60
(dp1721
sg69
g1568
sg62
(lp1722
g55
(g76
g57
NtRp1723
(dp1724
g60
(dp1725
g80
g81
ssg69
g1719
sg62
(lp1726
g830
asbag55
(g76
g57
NtRp1727
(dp1728
g60
(dp1729
g87
g88
ssg69
g1719
sg62
(lp1730
S':'
asbag55
(g76
g57
NtRp1731
(dp1732
g60
(dp1733
sg69
g1719
sg62
(lp1734
g55
(g56
g57
NtRp1735
(dp1736
g60
(dp1737
g68
I4
ssg69
g1731
sg62
(lp1738
g98
asbasbasbag55
(g71
g57
NtRp1739
(dp1740
g60
(dp1741
sg69
g1568
sg62
(lp1742
g55
(g76
g57
NtRp1743
(dp1744
g60
(dp1745
g80
g81
ssg69
g1739
sg62
(lp1746
g851
asbag55
(g76
g57
NtRp1747
(dp1748
g60
(dp1749
g87
g88
ssg69
g1739
sg62
(lp1750
S':'
asbag55
(g76
g57
NtRp1751
(dp1752
g60
(dp1753
sg69
g1739
sg62
(lp1754
g55
(g56
g57
NtRp1755
(dp1756
g60
(dp1757
g68
I4
ssg69
g1751
sg62
(lp1758
g98
asbasbasbag55
(g71
g57
NtRp1759
(dp1760
g60
(dp1761
sg69
g1568
sg62
(lp1762
g55
(g76
g57
NtRp1763
(dp1764
g60
(dp1765
g80
g81
ssg69
g1759
sg62
(lp1766
g1110
asbag55
(g76
g57
NtRp1767
(dp1768
g60
(dp1769
g87
g88
ssg69
g1759
sg62
(lp1770
S':'
asbag55
(g76
g57
NtRp1771
(dp1772
g60
(dp1773
sg69
g1759
sg62
(lp1774
g55
(g56
g57
NtRp1775
(dp1776
g60
(dp1777
g68
I4
ssg69
g1771
sg62
(lp1778
g1123
asbasbasbag55
(g71
g57
NtRp1779
(dp1780
g60
(dp1781
sg69
g1568
sg62
(lp1782
g55
(g76
g57
NtRp1783
(dp1784
g60
(dp1785
g80
g81
ssg69
g1779
sg62
(lp1786
g1175
asbag55
(g76
g57
NtRp1787
(dp1788
g60
(dp1789
g87
g88
ssg69
g1779
sg62
(lp1790
S':'
asbag55
(g76
g57
NtRp1791
(dp1792
g60
(dp1793
sg69
g1779
sg62
(lp1794
g55
(g56
g57
NtRp1795
(dp1796
g60
(dp1797
g68
I4
ssg69
g1791
sg62
(lp1798
g55
(g64
g57
NtRp1799
(dp1800
g60
(dp1801
g68
I3
ssg69
Nsg62
(lp1802
g55
(g71
g57
NtRp1803
(dp1804
g60
(dp1805
sg69
g1799
sg62
(lp1806
g55
(g76
g57
NtRp1807
(dp1808
g60
(dp1809
sg69
g1803
sg62
(lp1810
g55
(g56
g57
NtRp1811
(dp1812
g60
(dp1813
g68
I3
ssg69
g1807
sg62
(lp1814
S'1'
asbasbasbag55
(g71
g57
NtRp1815
(dp1816
g60
(dp1817
sg69
g1799
sg62
(lp1818
g55
(g76
g57
NtRp1819
(dp1820
g60
(dp1821
sg69
g1815
sg62
(lp1822
g55
(g56
g57
NtRp1823
(dp1824
g60
(dp1825
g68
I3
ssg69
g1819
sg62
(lp1826
S'99'
p1827
asbasbasbag55
(g71
g57
NtRp1828
(dp1829
g60
(dp1830
sg69
g1799
sg62
(lp1831
g55
(g76
g57
NtRp1832
(dp1833
g60
(dp1834
sg69
g1828
sg62
(lp1835
g55
(g56
g57
NtRp1836
(dp1837
g60
(dp1838
g68
I3
ssg69
g1832
sg62
(lp1839
S'7'
asbasbasbag55
(g71
g57
NtRp1840
(dp1841
g60
(dp1842
sg69
g1799
sg62
(lp1843
g55
(g76
g57
NtRp1844
(dp1845
g60
(dp1846
sg69
g1840
sg62
(lp1847
g55
(g56
g57
NtRp1848
(dp1849
g60
(dp1850
g68
I3
ssg69
g1844
sg62
(lp1851
S'datetime.datetime(2012, 3, 4, 22, 12, 8)'
p1852
asbasbasbag55
(g71
g57
NtRp1853
(dp1854
g60
(dp1855
sg69
g1799
sg62
(lp1856
g55
(g76
g57
NtRp1857
(dp1858
g60
(dp1859
sg69
g1853
sg62
(lp1860
g55
(g56
g57
NtRp1861
(dp1862
g60
(dp1863
g68
I3
ssg69
g1857
sg62
(lp1864
g1254
asbasbasbasbasbasbasbasbasbasbasbag55
(g71
g57
NtRp1865
(dp1866
g60
(dp1867
sg69
g65
sg62
(lp1868
g55
(g76
g57
NtRp1869
(dp1870
g60
(dp1871
g80
g81
ssg69
g1865
sg62
(lp1872
S'is_https'
p1873
asbag55
(g76
g57
NtRp1874
(dp1875
g60
(dp1876
g87
g88
ssg69
g1865
sg62
(lp1877
S':'
asbag55
(g76
g57
NtRp1878
(dp1879
g60
(dp1880
sg69
g1865
sg62
(lp1881
g55
(g56
g57
NtRp1882
(dp1883
g60
(dp1884
g68
I5
ssg69
g1878
sg62
(lp1885
g98
asbasbasbag55
(g71
g57
NtRp1886
(dp1887
g60
(dp1888
sg69
g65
sg62
(lp1889
g55
(g76
g57
NtRp1890
(dp1891
g60
(dp1892
g80
g81
ssg69
g1886
sg62
(lp1893
S'is_local'
p1894
asbag55
(g76
g57
NtRp1895
(dp1896
g60
(dp1897
g87
g88
ssg69
g1886
sg62
(lp1898
S':'
asbag55
(g76
g57
NtRp1899
(dp1900
g60
(dp1901
sg69
g1886
sg62
(lp1902
g55
(g56
g57
NtRp1903
(dp1904
g60
(dp1905
g68
I5
ssg69
g1899
sg62
(lp1906
g1363
asbasbasbag55
(g71
g57
NtRp1907
(dp1908
g60
(dp1909
sg69
g65
sg62
(lp1910
g55
(g76
g57
NtRp1911
(dp1912
g60
(dp1913
g80
g81
ssg69
g1907
sg62
(lp1914
S'is_restful'
p1915
asbag55
(g76
g57
NtRp1916
(dp1917
g60
(dp1918
g87
g88
ssg69
g1907
sg62
(lp1919
S':'
asbag55
(g76
g57
NtRp1920
(dp1921
g60
(dp1922
sg69
g1907
sg62
(lp1923
g55
(g56
g57
NtRp1924
(dp1925
g60
(dp1926
g68
I5
ssg69
g1920
sg62
(lp1927
g98
asbasbasbag55
(g71
g57
NtRp1928
(dp1929
g60
(dp1930
sg69
g65
sg62
(lp1931
g55
(g76
g57
NtRp1932
(dp1933
g60
(dp1934
g80
g81
ssg69
g1928
sg62
(lp1935
S'now'
p1936
asbag55
(g76
g57
NtRp1937
(dp1938
g60
(dp1939
g87
g88
ssg69
g1928
sg62
(lp1940
S':'
asbag55
(g76
g57
NtRp1941
(dp1942
g60
(dp1943
sg69
g1928
sg62
(lp1944
g55
(g56
g57
NtRp1945
(dp1946
g60
(dp1947
g68
I5
ssg69
g1941
sg62
(lp1948
S'datetime.datetime(2012, 3, 21, 21, 18, 22, 440000)'
p1949
asbasbasbag55
(g71
g57
NtRp1950
(dp1951
g60
(dp1952
sg69
g65
sg62
(lp1953
g55
(g76
g57
NtRp1954
(dp1955
g60
(dp1956
g80
g81
ssg69
g1950
sg62
(lp1957
S'post_vars'
p1958
asbag55
(g76
g57
NtRp1959
(dp1960
g60
(dp1961
g87
g88
ssg69
g1950
sg62
(lp1962
S':'
asbag55
(g76
g57
NtRp1963
(dp1964
g60
(dp1965
sg69
g1950
sg62
(lp1966
g55
(g56
g57
NtRp1967
(dp1968
g60
(dp1969
g68
I5
ssg69
g1963
sg62
(lp1970
g55
(g64
g57
NtRp1971
(dp1972
g60
(dp1973
g68
I4
ssg69
Nsg62
(lp1974
sbasbasbasbag55
(g71
g57
NtRp1975
(dp1976
g60
(dp1977
sg69
g65
sg62
(lp1978
g55
(g76
g57
NtRp1979
(dp1980
g60
(dp1981
g80
g81
ssg69
g1975
sg62
(lp1982
S'raw_args'
p1983
asbag55
(g76
g57
NtRp1984
(dp1985
g60
(dp1986
g87
g88
ssg69
g1975
sg62
(lp1987
S':'
asbag55
(g76
g57
NtRp1988
(dp1989
g60
(dp1990
sg69
g1975
sg62
(lp1991
g55
(g56
g57
NtRp1992
(dp1993
g60
(dp1994
g68
I5
ssg69
g1988
sg62
(lp1995
S'parleyweb'
p1996
asbasbasbag55
(g71
g57
NtRp1997
(dp1998
g60
(dp1999
sg69
g65
sg62
(lp2000
g55
(g76
g57
NtRp2001
(dp2002
g60
(dp2003
g80
g81
ssg69
g1997
sg62
(lp2004
S'url'
p2005
asbag55
(g76
g57
NtRp2006
(dp2007
g60
(dp2008
g87
g88
ssg69
g1997
sg62
(lp2009
S':'
asbag55
(g76
g57
NtRp2010
(dp2011
g60
(dp2012
sg69
g1997
sg62
(lp2013
g55
(g56
g57
NtRp2014
(dp2015
g60
(dp2016
g68
I5
ssg69
g2010
sg62
(lp2017
S'/admin/default/design/parleyweb'
p2018
asbasbasbag55
(g71
g57
NtRp2019
(dp2020
g60
(dp2021
sg69
g65
sg62
(lp2022
g55
(g76
g57
NtRp2023
(dp2024
g60
(dp2025
g80
g81
ssg69
g2019
sg62
(lp2026
S'utcnow'
p2027
asbag55
(g76
g57
NtRp2028
(dp2029
g60
(dp2030
g87
g88
ssg69
g2019
sg62
(lp2031
S':'
asbag55
(g76
g57
NtRp2032
(dp2033
g60
(dp2034
sg69
g2019
sg62
(lp2035
g55
(g56
g57
NtRp2036
(dp2037
g60
(dp2038
g68
I5
ssg69
g2032
sg62
(lp2039
S'datetime.datetime(2012, 3, 21, 20, 18, 22, 440000)'
p2040
asbasbasbag55
(g71
g57
NtRp2041
(dp2042
g60
(dp2043
sg69
g65
sg62
(lp2044
g55
(g76
g57
NtRp2045
(dp2046
g60
(dp2047
g80
g81
ssg69
g2041
sg62
(lp2048
S'uuid'
p2049
asbag55
(g76
g57
NtRp2050
(dp2051
g60
(dp2052
g87
g88
ssg69
g2041
sg62
(lp2053
S':'
asbag55
(g76
g57
NtRp2054
(dp2055
g60
(dp2056
sg69
g2041
sg62
(lp2057
g55
(g56
g57
NtRp2058
(dp2059
g60
(dp2060
g68
I5
ssg69
g2054
sg62
(lp2061
S'admin/127.0.0.1.2012-03-21.21-18-22.0a8c08d8-5c69-4c9d-a8bf-1f83fc72f2ea'
p2062
asbasbasbag55
(g71
g57
NtRp2063
(dp2064
g60
(dp2065
sg69
g65
sg62
(lp2066
g55
(g76
g57
NtRp2067
(dp2068
g60
(dp2069
g80
g81
ssg69
g2063
sg62
(lp2070
S'vars'
p2071
asbag55
(g76
g57
NtRp2072
(dp2073
g60
(dp2074
g87
g88
ssg69
g2063
sg62
(lp2075
S':'
asbag55
(g76
g57
NtRp2076
(dp2077
g60
(dp2078
sg69
g2063
sg62
(lp2079
g55
(g56
g57
NtRp2080
(dp2081
g60
(dp2082
g68
I5
ssg69
g2076
sg62
(lp2083
g55
(g64
g57
NtRp2084
(dp2085
g60
(dp2086
g68
I4
ssg69
Nsg62
(lp2087
sbasbasbasbag55
(g71
g57
NtRp2088
(dp2089
g60
(dp2090
sg69
g65
sg62
(lp2091
g55
(g76
g57
NtRp2092
(dp2093
g60
(dp2094
g80
g81
ssg69
g2088
sg62
(lp2095
S'wsgi'
p2096
asbag55
(g76
g57
NtRp2097
(dp2098
g60
(dp2099
g87
g88
ssg69
g2088
sg62
(lp2100
S':'
asbag55
(g76
g57
NtRp2101
(dp2102
g60
(dp2103
sg69
g2088
sg62
(lp2104
g55
(g56
g57
NtRp2105
(dp2106
g60
(dp2107
g68
I5
ssg69
g2101
sg62
(lp2108
g55
(g64
g57
NtRp2109
(dp2110
g60
(dp2111
g68
I4
ssg69
Nsg62
(lp2112
g55
(g71
g57
NtRp2113
(dp2114
g60
(dp2115
sg69
g2109
sg62
(lp2116
g55
(g76
g57
NtRp2117
(dp2118
g60
(dp2119
g80
g81
ssg69
g2113
sg62
(lp2120
S'environ'
p2121
asbag55
(g76
g57
NtRp2122
(dp2123
g60
(dp2124
g87
g88
ssg69
g2113
sg62
(lp2125
S':'
asbag55
(g76
g57
NtRp2126
(dp2127
g60
(dp2128
sg69
g2113
sg62
(lp2129
g55
(g56
g57
NtRp2130
(dp2131
g60
(dp2132
g68
I4
ssg69
g2126
sg62
(lp2133
g55
(g64
g57
NtRp2134
(dp2135
g60
(dp2136
g68
I3
ssg69
Nsg62
(lp2137
g55
(g71
g57
NtRp2138
(dp2139
g60
(dp2140
sg69
g2134
sg62
(lp2141
g55
(g76
g57
NtRp2142
(dp2143
g60
(dp2144
g80
g81
ssg69
g2138
sg62
(lp2145
S'HTTP_ACCEPT'
p2146
asbag55
(g76
g57
NtRp2147
(dp2148
g60
(dp2149
g87
g88
ssg69
g2138
sg62
(lp2150
S':'
asbag55
(g76
g57
NtRp2151
(dp2152
g60
(dp2153
sg69
g2138
sg62
(lp2154
g55
(g56
g57
NtRp2155
(dp2156
g60
(dp2157
g68
I3
ssg69
g2151
sg62
(lp2158
g623
asbasbasbag55
(g71
g57
NtRp2159
(dp2160
g60
(dp2161
sg69
g2134
sg62
(lp2162
g55
(g76
g57
NtRp2163
(dp2164
g60
(dp2165
g80
g81
ssg69
g2159
sg62
(lp2166
S'HTTP_ACCEPT_CHARSET'
p2167
asbag55
(g76
g57
NtRp2168
(dp2169
g60
(dp2170
g87
g88
ssg69
g2159
sg62
(lp2171
S':'
asbag55
(g76
g57
NtRp2172
(dp2173
g60
(dp2174
sg69
g2159
sg62
(lp2175
g55
(g56
g57
NtRp2176
(dp2177
g60
(dp2178
g68
I3
ssg69
g2172
sg62
(lp2179
g645
asbasbasbag55
(g71
g57
NtRp2180
(dp2181
g60
(dp2182
sg69
g2134
sg62
(lp2183
g55
(g76
g57
NtRp2184
(dp2185
g60
(dp2186
g80
g81
ssg69
g2180
sg62
(lp2187
S'HTTP_ACCEPT_ENCODING'
p2188
asbag55
(g76
g57
NtRp2189
(dp2190
g60
(dp2191
g87
g88
ssg69
g2180
sg62
(lp2192
S':'
asbag55
(g76
g57
NtRp2193
(dp2194
g60
(dp2195
sg69
g2180
sg62
(lp2196
g55
(g56
g57
NtRp2197
(dp2198
g60
(dp2199
g68
I3
ssg69
g2193
sg62
(lp2200
g667
asbasbasbag55
(g71
g57
NtRp2201
(dp2202
g60
(dp2203
sg69
g2134
sg62
(lp2204
g55
(g76
g57
NtRp2205
(dp2206
g60
(dp2207
g80
g81
ssg69
g2201
sg62
(lp2208
S'HTTP_ACCEPT_LANGUAGE'
p2209
asbag55
(g76
g57
NtRp2210
(dp2211
g60
(dp2212
g87
g88
ssg69
g2201
sg62
(lp2213
S':'
asbag55
(g76
g57
NtRp2214
(dp2215
g60
(dp2216
sg69
g2201
sg62
(lp2217
g55
(g56
g57
NtRp2218
(dp2219
g60
(dp2220
g68
I3
ssg69
g2214
sg62
(lp2221
g689
asbasbasbag55
(g71
g57
NtRp2222
(dp2223
g60
(dp2224
sg69
g2134
sg62
(lp2225
g55
(g76
g57
NtRp2226
(dp2227
g60
(dp2228
g80
g81
ssg69
g2222
sg62
(lp2229
S'HTTP_CACHE_CONTROL'
p2230
asbag55
(g76
g57
NtRp2231
(dp2232
g60
(dp2233
g87
g88
ssg69
g2222
sg62
(lp2234
S':'
asbag55
(g76
g57
NtRp2235
(dp2236
g60
(dp2237
sg69
g2222
sg62
(lp2238
g55
(g56
g57
NtRp2239
(dp2240
g60
(dp2241
g68
I3
ssg69
g2235
sg62
(lp2242
g711
asbasbasbag55
(g71
g57
NtRp2243
(dp2244
g60
(dp2245
sg69
g2134
sg62
(lp2246
g55
(g76
g57
NtRp2247
(dp2248
g60
(dp2249
g80
g81
ssg69
g2243
sg62
(lp2250
S'HTTP_CONNECTION'
p2251
asbag55
(g76
g57
NtRp2252
(dp2253
g60
(dp2254
g87
g88
ssg69
g2243
sg62
(lp2255
S':'
asbag55
(g76
g57
NtRp2256
(dp2257
g60
(dp2258
sg69
g2243
sg62
(lp2259
g55
(g56
g57
NtRp2260
(dp2261
g60
(dp2262
g68
I3
ssg69
g2256
sg62
(lp2263
g733
asbasbasbag55
(g71
g57
NtRp2264
(dp2265
g60
(dp2266
sg69
g2134
sg62
(lp2267
g55
(g76
g57
NtRp2268
(dp2269
g60
(dp2270
g80
g81
ssg69
g2264
sg62
(lp2271
S'HTTP_COOKIE'
p2272
asbag55
(g76
g57
NtRp2273
(dp2274
g60
(dp2275
g87
g88
ssg69
g2264
sg62
(lp2276
S':'
asbag55
(g76
g57
NtRp2277
(dp2278
g60
(dp2279
sg69
g2264
sg62
(lp2280
g55
(g56
g57
NtRp2281
(dp2282
g60
(dp2283
g68
I3
ssg69
g2277
sg62
(lp2284
g755
asbasbasbag55
(g71
g57
NtRp2285
(dp2286
g60
(dp2287
sg69
g2134
sg62
(lp2288
g55
(g76
g57
NtRp2289
(dp2290
g60
(dp2291
g80
g81
ssg69
g2285
sg62
(lp2292
S'HTTP_HOST'
p2293
asbag55
(g76
g57
NtRp2294
(dp2295
g60
(dp2296
g87
g88
ssg69
g2285
sg62
(lp2297
S':'
asbag55
(g76
g57
NtRp2298
(dp2299
g60
(dp2300
sg69
g2285
sg62
(lp2301
g55
(g56
g57
NtRp2302
(dp2303
g60
(dp2304
g68
I3
ssg69
g2298
sg62
(lp2305
g777
asbasbasbag55
(g71
g57
NtRp2306
(dp2307
g60
(dp2308
sg69
g2134
sg62
(lp2309
g55
(g76
g57
NtRp2310
(dp2311
g60
(dp2312
g80
g81
ssg69
g2306
sg62
(lp2313
S'HTTP_REFERER'
p2314
asbag55
(g76
g57
NtRp2315
(dp2316
g60
(dp2317
g87
g88
ssg69
g2306
sg62
(lp2318
S':'
asbag55
(g76
g57
NtRp2319
(dp2320
g60
(dp2321
sg69
g2306
sg62
(lp2322
g55
(g56
g57
NtRp2323
(dp2324
g60
(dp2325
g68
I3
ssg69
g2319
sg62
(lp2326
g799
asbasbasbag55
(g71
g57
NtRp2327
(dp2328
g60
(dp2329
sg69
g2134
sg62
(lp2330
g55
(g76
g57
NtRp2331
(dp2332
g60
(dp2333
g80
g81
ssg69
g2327
sg62
(lp2334
S'HTTP_USER_AGENT'
p2335
asbag55
(g76
g57
NtRp2336
(dp2337
g60
(dp2338
g87
g88
ssg69
g2327
sg62
(lp2339
S':'
asbag55
(g76
g57
NtRp2340
(dp2341
g60
(dp2342
sg69
g2327
sg62
(lp2343
g55
(g56
g57
NtRp2344
(dp2345
g60
(dp2346
g68
I3
ssg69
g2340
sg62
(lp2347
g821
asbasbasbag55
(g71
g57
NtRp2348
(dp2349
g60
(dp2350
sg69
g2134
sg62
(lp2351
g55
(g76
g57
NtRp2352
(dp2353
g60
(dp2354
g80
g81
ssg69
g2348
sg62
(lp2355
S'PATH_INFO'
p2356
asbag55
(g76
g57
NtRp2357
(dp2358
g60
(dp2359
g87
g88
ssg69
g2348
sg62
(lp2360
S':'
asbag55
(g76
g57
NtRp2361
(dp2362
g60
(dp2363
sg69
g2348
sg62
(lp2364
g55
(g56
g57
NtRp2365
(dp2366
g60
(dp2367
g68
I3
ssg69
g2361
sg62
(lp2368
g885
asbasbasbag55
(g71
g57
NtRp2369
(dp2370
g60
(dp2371
sg69
g2134
sg62
(lp2372
g55
(g76
g57
NtRp2373
(dp2374
g60
(dp2375
g80
g81
ssg69
g2369
sg62
(lp2376
S'QUERY_STRING'
p2377
asbag55
(g76
g57
NtRp2378
(dp2379
g60
(dp2380
g87
g88
ssg69
g2369
sg62
(lp2381
S':'
asbag55
(g76
g57
NtRp2382
(dp2383
g60
(dp2384
sg69
g2369
sg62
(lp2385
g55
(g56
g57
NtRp2386
(dp2387
g60
(dp2388
g68
I3
ssg69
g2382
sg62
(lp2389
S''
asbasbasbag55
(g71
g57
NtRp2390
(dp2391
g60
(dp2392
sg69
g2134
sg62
(lp2393
g55
(g76
g57
NtRp2394
(dp2395
g60
(dp2396
g80
g81
ssg69
g2390
sg62
(lp2397
S'REMOTE_ADDR'
p2398
asbag55
(g76
g57
NtRp2399
(dp2400
g60
(dp2401
g87
g88
ssg69
g2390
sg62
(lp2402
S':'
asbag55
(g76
g57
NtRp2403
(dp2404
g60
(dp2405
sg69
g2390
sg62
(lp2406
g55
(g56
g57
NtRp2407
(dp2408
g60
(dp2409
g68
I3
ssg69
g2403
sg62
(lp2410
g201
asbasbasbag55
(g71
g57
NtRp2411
(dp2412
g60
(dp2413
sg69
g2134
sg62
(lp2414
g55
(g76
g57
NtRp2415
(dp2416
g60
(dp2417
g80
g81
ssg69
g2411
sg62
(lp2418
S'REMOTE_PORT'
p2419
asbag55
(g76
g57
NtRp2420
(dp2421
g60
(dp2422
g87
g88
ssg69
g2411
sg62
(lp2423
S':'
asbag55
(g76
g57
NtRp2424
(dp2425
g60
(dp2426
sg69
g2411
sg62
(lp2427
g55
(g56
g57
NtRp2428
(dp2429
g60
(dp2430
g68
I3
ssg69
g2424
sg62
(lp2431
g949
asbasbasbag55
(g71
g57
NtRp2432
(dp2433
g60
(dp2434
sg69
g2134
sg62
(lp2435
g55
(g76
g57
NtRp2436
(dp2437
g60
(dp2438
g80
g81
ssg69
g2432
sg62
(lp2439
S'REQUEST_METHOD'
p2440
asbag55
(g76
g57
NtRp2441
(dp2442
g60
(dp2443
g87
g88
ssg69
g2432
sg62
(lp2444
S':'
asbag55
(g76
g57
NtRp2445
(dp2446
g60
(dp2447
sg69
g2432
sg62
(lp2448
g55
(g56
g57
NtRp2449
(dp2450
g60
(dp2451
g68
I3
ssg69
g2445
sg62
(lp2452
g971
asbasbasbag55
(g71
g57
NtRp2453
(dp2454
g60
(dp2455
sg69
g2134
sg62
(lp2456
g55
(g76
g57
NtRp2457
(dp2458
g60
(dp2459
g80
g81
ssg69
g2453
sg62
(lp2460
S'REQUEST_URI'
p2461
asbag55
(g76
g57
NtRp2462
(dp2463
g60
(dp2464
g87
g88
ssg69
g2453
sg62
(lp2465
S':'
asbag55
(g76
g57
NtRp2466
(dp2467
g60
(dp2468
sg69
g2453
sg62
(lp2469
g55
(g56
g57
NtRp2470
(dp2471
g60
(dp2472
g68
I3
ssg69
g2466
sg62
(lp2473
g885
asbasbasbag55
(g71
g57
NtRp2474
(dp2475
g60
(dp2476
sg69
g2134
sg62
(lp2477
g55
(g76
g57
NtRp2478
(dp2479
g60
(dp2480
g80
g81
ssg69
g2474
sg62
(lp2481
S'SCRIPT_NAME'
p2482
asbag55
(g76
g57
NtRp2483
(dp2484
g60
(dp2485
g87
g88
ssg69
g2474
sg62
(lp2486
S':'
asbag55
(g76
g57
NtRp2487
(dp2488
g60
(dp2489
sg69
g2474
sg62
(lp2490
g55
(g56
g57
NtRp2491
(dp2492
g60
(dp2493
g68
I3
ssg69
g2487
sg62
(lp2494
S''
asbasbasbag55
(g71
g57
NtRp2495
(dp2496
g60
(dp2497
sg69
g2134
sg62
(lp2498
g55
(g76
g57
NtRp2499
(dp2500
g60
(dp2501
g80
g81
ssg69
g2495
sg62
(lp2502
S'SERVER_NAME'
p2503
asbag55
(g76
g57
NtRp2504
(dp2505
g60
(dp2506
g87
g88
ssg69
g2495
sg62
(lp2507
S':'
asbag55
(g76
g57
NtRp2508
(dp2509
g60
(dp2510
sg69
g2495
sg62
(lp2511
g55
(g56
g57
NtRp2512
(dp2513
g60
(dp2514
g68
I3
ssg69
g2508
sg62
(lp2515
g1035
asbasbasbag55
(g71
g57
NtRp2516
(dp2517
g60
(dp2518
sg69
g2134
sg62
(lp2519
g55
(g76
g57
NtRp2520
(dp2521
g60
(dp2522
g80
g81
ssg69
g2516
sg62
(lp2523
S'SERVER_PORT'
p2524
asbag55
(g76
g57
NtRp2525
(dp2526
g60
(dp2527
g87
g88
ssg69
g2516
sg62
(lp2528
S':'
asbag55
(g76
g57
NtRp2529
(dp2530
g60
(dp2531
sg69
g2516
sg62
(lp2532
g55
(g56
g57
NtRp2533
(dp2534
g60
(dp2535
g68
I3
ssg69
g2529
sg62
(lp2536
g1057
asbasbasbag55
(g71
g57
NtRp2537
(dp2538
g60
(dp2539
sg69
g2134
sg62
(lp2540
g55
(g76
g57
NtRp2541
(dp2542
g60
(dp2543
g80
g81
ssg69
g2537
sg62
(lp2544
S'SERVER_PROTOCOL'
p2545
asbag55
(g76
g57
NtRp2546
(dp2547
g60
(dp2548
g87
g88
ssg69
g2537
sg62
(lp2549
S':'
asbag55
(g76
g57
NtRp2550
(dp2551
g60
(dp2552
sg69
g2537
sg62
(lp2553
g55
(g56
g57
NtRp2554
(dp2555
g60
(dp2556
g68
I3
ssg69
g2550
sg62
(lp2557
g1079
asbasbasbag55
(g71
g57
NtRp2558
(dp2559
g60
(dp2560
sg69
g2134
sg62
(lp2561
g55
(g76
g57
NtRp2562
(dp2563
g60
(dp2564
g80
g81
ssg69
g2558
sg62
(lp2565
S'SERVER_SOFTWARE'
p2566
asbag55
(g76
g57
NtRp2567
(dp2568
g60
(dp2569
g87
g88
ssg69
g2558
sg62
(lp2570
S':'
asbag55
(g76
g57
NtRp2571
(dp2572
g60
(dp2573
sg69
g2558
sg62
(lp2574
g55
(g56
g57
NtRp2575
(dp2576
g60
(dp2577
g68
I3
ssg69
g2571
sg62
(lp2578
g1101
asbasbasbag55
(g71
g57
NtRp2579
(dp2580
g60
(dp2581
sg69
g2134
sg62
(lp2582
g55
(g76
g57
NtRp2583
(dp2584
g60
(dp2585
g80
g81
ssg69
g2579
sg62
(lp2586
S'WEB2PY_ORIGINAL_URI'
p2587
asbag55
(g76
g57
NtRp2588
(dp2589
g60
(dp2590
g87
g88
ssg69
g2579
sg62
(lp2591
S':'
asbag55
(g76
g57
NtRp2592
(dp2593
g60
(dp2594
sg69
g2579
sg62
(lp2595
g55
(g56
g57
NtRp2596
(dp2597
g60
(dp2598
g68
I3
ssg69
g2592
sg62
(lp2599
g1145
asbasbasbag55
(g71
g57
NtRp2600
(dp2601
g60
(dp2602
sg69
g2134
sg62
(lp2603
g55
(g76
g57
NtRp2604
(dp2605
g60
(dp2606
g80
g81
ssg69
g2600
sg62
(lp2607
S'wsgi.errors'
p2608
asbag55
(g76
g57
NtRp2609
(dp2610
g60
(dp2611
g87
g88
ssg69
g2600
sg62
(lp2612
S':'
asbag55
(g76
g57
NtRp2613
(dp2614
g60
(dp2615
sg69
g2600
sg62
(lp2616
g55
(g56
g57
NtRp2617
(dp2618
g60
(dp2619
g68
I3
ssg69
g2613
sg62
(lp2620
S"<open file '<stderr>', mode 'w' at 0x004200B0>"
p2621
asbasbasbag55
(g71
g57
NtRp2622
(dp2623
g60
(dp2624
sg69
g2134
sg62
(lp2625
g55
(g76
g57
NtRp2626
(dp2627
g60
(dp2628
g80
g81
ssg69
g2622
sg62
(lp2629
S'wsgi.file_wrapper'
p2630
asbag55
(g76
g57
NtRp2631
(dp2632
g60
(dp2633
g87
g88
ssg69
g2622
sg62
(lp2634
S':'
asbag55
(g76
g57
NtRp2635
(dp2636
g60
(dp2637
sg69
g2622
sg62
(lp2638
g55
(g56
g57
NtRp2639
(dp2640
g60
(dp2641
g68
I3
ssg69
g2635
sg62
(lp2642
S'<class wsgiref.util.FileWrapper at 0x02B69390>'
p2643
asbasbasbag55
(g71
g57
NtRp2644
(dp2645
g60
(dp2646
sg69
g2134
sg62
(lp2647
g55
(g76
g57
NtRp2648
(dp2649
g60
(dp2650
g80
g81
ssg69
g2644
sg62
(lp2651
S'wsgi.input'
p2652
asbag55
(g76
g57
NtRp2653
(dp2654
g60
(dp2655
g87
g88
ssg69
g2644
sg62
(lp2656
S':'
asbag55
(g76
g57
NtRp2657
(dp2658
g60
(dp2659
sg69
g2644
sg62
(lp2660
g55
(g56
g57
NtRp2661
(dp2662
g60
(dp2663
g68
I3
ssg69
g2657
sg62
(lp2664
S'<cStringIO.StringO object at 0x05E456A0>'
p2665
asbasbasbag55
(g71
g57
NtRp2666
(dp2667
g60
(dp2668
sg69
g2134
sg62
(lp2669
g55
(g76
g57
NtRp2670
(dp2671
g60
(dp2672
g80
g81
ssg69
g2666
sg62
(lp2673
S'wsgi.multiprocess'
p2674
asbag55
(g76
g57
NtRp2675
(dp2676
g60
(dp2677
g87
g88
ssg69
g2666
sg62
(lp2678
S':'
asbag55
(g76
g57
NtRp2679
(dp2680
g60
(dp2681
sg69
g2666
sg62
(lp2682
g55
(g56
g57
NtRp2683
(dp2684
g60
(dp2685
g68
I3
ssg69
g2679
sg62
(lp2686
g98
asbasbasbag55
(g71
g57
NtRp2687
(dp2688
g60
(dp2689
sg69
g2134
sg62
(lp2690
g55
(g76
g57
NtRp2691
(dp2692
g60
(dp2693
g80
g81
ssg69
g2687
sg62
(lp2694
S'wsgi.multithread'
p2695
asbag55
(g76
g57
NtRp2696
(dp2697
g60
(dp2698
g87
g88
ssg69
g2687
sg62
(lp2699
S':'
asbag55
(g76
g57
NtRp2700
(dp2701
g60
(dp2702
sg69
g2687
sg62
(lp2703
g55
(g56
g57
NtRp2704
(dp2705
g60
(dp2706
g68
I3
ssg69
g2700
sg62
(lp2707
g1363
asbasbasbag55
(g71
g57
NtRp2708
(dp2709
g60
(dp2710
sg69
g2134
sg62
(lp2711
g55
(g76
g57
NtRp2712
(dp2713
g60
(dp2714
g80
g81
ssg69
g2708
sg62
(lp2715
S'wsgi.run_once'
p2716
asbag55
(g76
g57
NtRp2717
(dp2718
g60
(dp2719
g87
g88
ssg69
g2708
sg62
(lp2720
S':'
asbag55
(g76
g57
NtRp2721
(dp2722
g60
(dp2723
sg69
g2708
sg62
(lp2724
g55
(g56
g57
NtRp2725
(dp2726
g60
(dp2727
g68
I3
ssg69
g2721
sg62
(lp2728
g98
asbasbasbag55
(g71
g57
NtRp2729
(dp2730
g60
(dp2731
sg69
g2134
sg62
(lp2732
g55
(g76
g57
NtRp2733
(dp2734
g60
(dp2735
g80
g81
ssg69
g2729
sg62
(lp2736
S'wsgi.url_scheme'
p2737
asbag55
(g76
g57
NtRp2738
(dp2739
g60
(dp2740
g87
g88
ssg69
g2729
sg62
(lp2741
S':'
asbag55
(g76
g57
NtRp2742
(dp2743
g60
(dp2744
sg69
g2729
sg62
(lp2745
g55
(g56
g57
NtRp2746
(dp2747
g60
(dp2748
g68
I3
ssg69
g2742
sg62
(lp2749
g1406
asbasbasbag55
(g71
g57
NtRp2750
(dp2751
g60
(dp2752
sg69
g2134
sg62
(lp2753
g55
(g76
g57
NtRp2754
(dp2755
g60
(dp2756
g80
g81
ssg69
g2750
sg62
(lp2757
S'wsgi.version'
p2758
asbag55
(g76
g57
NtRp2759
(dp2760
g60
(dp2761
g87
g88
ssg69
g2750
sg62
(lp2762
S':'
asbag55
(g76
g57
NtRp2763
(dp2764
g60
(dp2765
sg69
g2750
sg62
(lp2766
g55
(g56
g57
NtRp2767
(dp2768
g60
(dp2769
g68
I3
ssg69
g2763
sg62
(lp2770
S'1'
asbasbasbasbasbasbasbasbasbasbasbasbasbsS'frames'
p2771
(lp2772
(dp2773
S'file'
p2774
S'D:\\Dise\xf1o Web\\Proyectos\\Parleyweb\\web2py\\gluon\\restricted.py'
p2775
sS'dump'
p2776
(dp2777
sS'lnum'
p2778
I205
sS'lines'
p2779
(dp2780
sS'call'
p2781
S'(code="# coding: utf8\\n\\nEXPERIMENTAL_STUFF = True\\n\\nif EX...te\'))\\n\\n\\n\\nresponse._vars=response._caller(design)\\n", environment={\'A\': <class \'gluon.html.A\'>, \'ALLOW_TOGGLE\': \'true\', \'A_button\': <function A_button at 0x065ADCB0>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, \'CAT\': <class \'gluon.html.CAT\'>, \'CENTER\': <class \'gluon.html.CENTER\'>, ...}, layer=\'D:\\\\Dise\\xf1o Web\\\\Proyectos\\\\Parleyweb\\\\web2py\\\\applications\\\\admin\\\\controllers/default.py\')'
p2782
sS'func'
p2783
S'restricted'
p2784
sa(dp2785
g2774
S'D:\\Dise\xf1o Web\\Proyectos\\Parleyweb\\web2py\\applications\\admin\\controllers\\default.py'
p2786
sg2776
(dp2787
sg2778
I1352
sg2779
(dp2788
I1344
S'def reload_routes():'
p2789
sI1345
S'    """ Reload routes.py """'
p2790
sI1346
S'    import gluon.rewrite'
p2791
sI1347
S'    gluon.rewrite.load()'
p2792
sI1348
S"    redirect(URL('site'))"
p2793
sI1349
S''
sI1350
S''
sI1341
S'    else:'
p2794
sI1342
S'        return dict(form=T("Disabled"))'
p2795
sI1343
S''
ssg2781
S'()'
p2796
sg2783
S'<module>'
p2797
sa(dp2798
g2774
S'D:\\Dise\xf1o Web\\Proyectos\\Parleyweb\\web2py\\gluon\\globals.py'
p2799
sg2776
(dp2800
sg2778
I173
sg2779
(dp2801
sg2781
S'(f=<function design at 0x061A97B0>)'
p2802
sg2783
S'<lambda>'
p2803
sa(dp2804
g2774
S'D:\\Dise\xf1o Web\\Proyectos\\Parleyweb\\web2py\\applications\\admin\\controllers\\default.py'
p2805
sg2776
(dp2806
sg2778
I760
sg2779
(dp2807
I755
S'    # Get all languages'
p2808
sI756
S"    languages = listdir(apath('%s/languages/' % app, r=request), '[\\w-]*\\.py')"
p2809
sI757
S''
sI758
S'    #Get crontab'
p2810
sI759
S"    cronfolder = apath('%s/cron' % app, r=request)"
p2811
sI760
S'    if not os.path.exists(cronfolder): os.mkdir(cronfolder)'
p2812
sI761
S"    crontab = apath('%s/cron/crontab' % app, r=request)"
p2813
sI762
S'    if not os.path.exists(crontab):'
p2814
sI763
S"        safe_write(crontab, '#crontab')"
p2815
sI764
S''
ssg2781
S'()'
p2816
sg2783
S'design'
p2817
sasS'pyver'
p2818
S'Python 2.5.4: D:\\Dise\xf1o Web\\Proyectos\\Parleyweb\\web2py\\web2py.exe'
p2819
sS'session'
p2820
g55
(g56
g57
NtRp2821
(dp2822
g60
(dp2823
sg62
(lp2824
g55
(g64
g57
NtRp2825
(dp2826
g60
(dp2827
g68
I5
ssg69
Nsg62
(lp2828
g55
(g71
g57
NtRp2829
(dp2830
g60
(dp2831
sg69
g2825
sg62
(lp2832
g55
(g76
g57
NtRp2833
(dp2834
g60
(dp2835
g80
g81
ssg69
g2829
sg62
(lp2836
S'authorized'
p2837
asbag55
(g76
g57
NtRp2838
(dp2839
g60
(dp2840
g87
g88
ssg69
g2829
sg62
(lp2841
S':'
asbag55
(g76
g57
NtRp2842
(dp2843
g60
(dp2844
sg69
g2829
sg62
(lp2845
g55
(g56
g57
NtRp2846
(dp2847
g60
(dp2848
g68
I5
ssg69
g2842
sg62
(lp2849
g1363
asbasbasbag55
(g71
g57
NtRp2850
(dp2851
g60
(dp2852
sg69
g2825
sg62
(lp2853
g55
(g76
g57
NtRp2854
(dp2855
g60
(dp2856
g80
g81
ssg69
g2850
sg62
(lp2857
S'check_version'
p2858
asbag55
(g76
g57
NtRp2859
(dp2860
g60
(dp2861
g87
g88
ssg69
g2850
sg62
(lp2862
S':'
asbag55
(g76
g57
NtRp2863
(dp2864
g60
(dp2865
sg69
g2850
sg62
(lp2866
g55
(g56
g57
NtRp2867
(dp2868
g60
(dp2869
g68
I5
ssg69
g2863
sg62
(lp2870
g1363
asbasbasbag55
(g71
g57
NtRp2871
(dp2872
g60
(dp2873
sg69
g2825
sg62
(lp2874
g55
(g76
g57
NtRp2875
(dp2876
g60
(dp2877
g80
g81
ssg69
g2871
sg62
(lp2878
S'last_time'
p2879
asbag55
(g76
g57
NtRp2880
(dp2881
g60
(dp2882
g87
g88
ssg69
g2871
sg62
(lp2883
S':'
asbag55
(g76
g57
NtRp2884
(dp2885
g60
(dp2886
sg69
g2871
sg62
(lp2887
g55
(g56
g57
NtRp2888
(dp2889
g60
(dp2890
g68
I5
ssg69
g2884
sg62
(lp2891
S'1332361102.4489999'
p2892
asbasbasbasbasbsS'etype'
p2893
S"<type 'exceptions.WindowsError'>"
p2894
sS'date'
p2895
S'Wed Mar 21 21:18:22 2012'
p2896
sS'response'
p2897
g55
(g56
g57
NtRp2898
(dp2899
g60
(dp2900
sg62
(lp2901
g55
(g64
g57
NtRp2902
(dp2903
g60
(dp2904
g68
I5
ssg69
Nsg62
(lp2905
g55
(g71
g57
NtRp2906
(dp2907
g60
(dp2908
sg69
g2902
sg62
(lp2909
g55
(g76
g57
NtRp2910
(dp2911
g60
(dp2912
g80
g81
ssg69
g2906
sg62
(lp2913
g166
asbag55
(g76
g57
NtRp2914
(dp2915
g60
(dp2916
g87
g88
ssg69
g2906
sg62
(lp2917
S':'
asbag55
(g76
g57
NtRp2918
(dp2919
g60
(dp2920
sg69
g2906
sg62
(lp2921
g55
(g56
g57
NtRp2922
(dp2923
g60
(dp2924
g68
I5
ssg69
g2918
sg62
(lp2925
S'<cStringIO.StringO object at 0x05EEE840>'
p2926
asbasbasbag55
(g71
g57
NtRp2927
(dp2928
g60
(dp2929
sg69
g2902
sg62
(lp2930
g55
(g76
g57
NtRp2931
(dp2932
g60
(dp2933
g80
g81
ssg69
g2927
sg62
(lp2934
g232
asbag55
(g76
g57
NtRp2935
(dp2936
g60
(dp2937
g87
g88
ssg69
g2927
sg62
(lp2938
S':'
asbag55
(g76
g57
NtRp2939
(dp2940
g60
(dp2941
sg69
g2927
sg62
(lp2942
g55
(g56
g57
NtRp2943
(dp2944
g60
(dp2945
g68
I5
ssg69
g2939
sg62
(lp2946
g55
(g64
g57
NtRp2947
(dp2948
g60
(dp2949
g68
I4
ssg69
Nsg62
(lp2950
g55
(g71
g57
NtRp2951
(dp2952
g60
(dp2953
sg69
g2947
sg62
(lp2954
g55
(g76
g57
NtRp2955
(dp2956
g60
(dp2957
g80
g81
ssg69
g2951
sg62
(lp2958
S'session_id_admin'
p2959
asbag55
(g76
g57
NtRp2960
(dp2961
g60
(dp2962
g87
g88
ssg69
g2951
sg62
(lp2963
S':'
asbag55
(g76
g57
NtRp2964
(dp2965
g60
(dp2966
sg69
g2951
sg62
(lp2967
g55
(g56
g57
NtRp2968
(dp2969
g60
(dp2970
g68
I4
ssg69
g2964
sg62
(lp2971
g55
(g64
g57
NtRp2972
(dp2973
g60
(dp2974
g68
I3
ssg69
Nsg62
(lp2975
g55
(g71
g57
NtRp2976
(dp2977
g60
(dp2978
sg69
g2972
sg62
(lp2979
g55
(g76
g57
NtRp2980
(dp2981
g60
(dp2982
g80
g81
ssg69
g2976
sg62
(lp2983
g282
asbag55
(g76
g57
NtRp2984
(dp2985
g60
(dp2986
g87
g88
ssg69
g2976
sg62
(lp2987
S':'
asbag55
(g76
g57
NtRp2988
(dp2989
g60
(dp2990
sg69
g2976
sg62
(lp2991
g55
(g56
g57
NtRp2992
(dp2993
g60
(dp2994
g68
I3
ssg69
g2988
sg62
(lp2995
S''
asbasbasbag55
(g71
g57
NtRp2996
(dp2997
g60
(dp2998
sg69
g2972
sg62
(lp2999
g55
(g76
g57
NtRp3000
(dp3001
g60
(dp3002
g80
g81
ssg69
g2996
sg62
(lp3003
g303
asbag55
(g76
g57
NtRp3004
(dp3005
g60
(dp3006
g87
g88
ssg69
g2996
sg62
(lp3007
S':'
asbag55
(g76
g57
NtRp3008
(dp3009
g60
(dp3010
sg69
g2996
sg62
(lp3011
g55
(g56
g57
NtRp3012
(dp3013
g60
(dp3014
g68
I3
ssg69
g3008
sg62
(lp3015
S''
asbasbasbag55
(g71
g57
NtRp3016
(dp3017
g60
(dp3018
sg69
g2972
sg62
(lp3019
g55
(g76
g57
NtRp3020
(dp3021
g60
(dp3022
g80
g81
ssg69
g3016
sg62
(lp3023
g324
asbag55
(g76
g57
NtRp3024
(dp3025
g60
(dp3026
g87
g88
ssg69
g3016
sg62
(lp3027
S':'
asbag55
(g76
g57
NtRp3028
(dp3029
g60
(dp3030
sg69
g3016
sg62
(lp3031
g55
(g56
g57
NtRp3032
(dp3033
g60
(dp3034
g68
I3
ssg69
g3028
sg62
(lp3035
S''
asbasbasbag55
(g71
g57
NtRp3036
(dp3037
g60
(dp3038
sg69
g2972
sg62
(lp3039
g55
(g76
g57
NtRp3040
(dp3041
g60
(dp3042
g80
g81
ssg69
g3036
sg62
(lp3043
g345
asbag55
(g76
g57
NtRp3044
(dp3045
g60
(dp3046
g87
g88
ssg69
g3036
sg62
(lp3047
S':'
asbag55
(g76
g57
NtRp3048
(dp3049
g60
(dp3050
sg69
g3036
sg62
(lp3051
g55
(g56
g57
NtRp3052
(dp3053
g60
(dp3054
g68
I3
ssg69
g3048
sg62
(lp3055
S''
asbasbasbag55
(g71
g57
NtRp3056
(dp3057
g60
(dp3058
sg69
g2972
sg62
(lp3059
g55
(g76
g57
NtRp3060
(dp3061
g60
(dp3062
g80
g81
ssg69
g3056
sg62
(lp3063
g366
asbag55
(g76
g57
NtRp3064
(dp3065
g60
(dp3066
g87
g88
ssg69
g3056
sg62
(lp3067
S':'
asbag55
(g76
g57
NtRp3068
(dp3069
g60
(dp3070
sg69
g3056
sg62
(lp3071
g55
(g56
g57
NtRp3072
(dp3073
g60
(dp3074
g68
I3
ssg69
g3068
sg62
(lp3075
S'/'
asbasbasbag55
(g71
g57
NtRp3076
(dp3077
g60
(dp3078
sg69
g2972
sg62
(lp3079
g55
(g76
g57
NtRp3080
(dp3081
g60
(dp3082
g80
g81
ssg69
g3076
sg62
(lp3083
g387
asbag55
(g76
g57
NtRp3084
(dp3085
g60
(dp3086
g87
g88
ssg69
g3076
sg62
(lp3087
S':'
asbag55
(g76
g57
NtRp3088
(dp3089
g60
(dp3090
sg69
g3076
sg62
(lp3091
g55
(g56
g57
NtRp3092
(dp3093
g60
(dp3094
g68
I3
ssg69
g3088
sg62
(lp3095
S''
asbasbasbag55
(g71
g57
NtRp3096
(dp3097
g60
(dp3098
sg69
g2972
sg62
(lp3099
g55
(g76
g57
NtRp3100
(dp3101
g60
(dp3102
g80
g81
ssg69
g3096
sg62
(lp3103
g408
asbag55
(g76
g57
NtRp3104
(dp3105
g60
(dp3106
g87
g88
ssg69
g3096
sg62
(lp3107
S':'
asbag55
(g76
g57
NtRp3108
(dp3109
g60
(dp3110
sg69
g3096
sg62
(lp3111
g55
(g56
g57
NtRp3112
(dp3113
g60
(dp3114
g68
I3
ssg69
g3108
sg62
(lp3115
S''
asbasbasbasbasbasbasbasbasbasbasbag55
(g71
g57
NtRp3116
(dp3117
g60
(dp3118
sg69
g2902
sg62
(lp3119
g55
(g76
g57
NtRp3120
(dp3121
g60
(dp3122
g80
g81
ssg69
g3116
sg62
(lp3123
S'delimiters'
p3124
asbag55
(g76
g57
NtRp3125
(dp3126
g60
(dp3127
g87
g88
ssg69
g3116
sg62
(lp3128
S':'
asbag55
(g76
g57
NtRp3129
(dp3130
g60
(dp3131
sg69
g3116
sg62
(lp3132
g55
(g56
g57
NtRp3133
(dp3134
g60
(dp3135
g68
I5
ssg69
g3129
sg62
(lp3136
g55
(g64
g57
NtRp3137
(dp3138
g60
(dp3139
g68
I4
ssg69
Nsg62
(lp3140
g55
(g71
g57
NtRp3141
(dp3142
g60
(dp3143
sg69
g3137
sg62
(lp3144
g55
(g76
g57
NtRp3145
(dp3146
g60
(dp3147
sg69
g3141
sg62
(lp3148
g55
(g56
g57
NtRp3149
(dp3150
g60
(dp3151
g68
I4
ssg69
g3145
sg62
(lp3152
S'{{'
p3153
asbasbasbag55
(g71
g57
NtRp3154
(dp3155
g60
(dp3156
sg69
g3137
sg62
(lp3157
g55
(g76
g57
NtRp3158
(dp3159
g60
(dp3160
sg69
g3154
sg62
(lp3161
g55
(g56
g57
NtRp3162
(dp3163
g60
(dp3164
g68
I4
ssg69
g3158
sg62
(lp3165
S'}}'
p3166
asbasbasbasbasbasbasbag55
(g71
g57
NtRp3167
(dp3168
g60
(dp3169
sg69
g2902
sg62
(lp3170
g55
(g76
g57
NtRp3171
(dp3172
g60
(dp3173
g80
g81
ssg69
g3167
sg62
(lp3174
S'files'
p3175
asbag55
(g76
g57
NtRp3176
(dp3177
g60
(dp3178
g87
g88
ssg69
g3167
sg62
(lp3179
S':'
asbag55
(g76
g57
NtRp3180
(dp3181
g60
(dp3182
sg69
g3167
sg62
(lp3183
g55
(g56
g57
NtRp3184
(dp3185
g60
(dp3186
g68
I5
ssg69
g3180
sg62
(lp3187
g55
(g64
g57
NtRp3188
(dp3189
g60
(dp3190
g68
I4
ssg69
Nsg62
(lp3191
g55
(g71
g57
NtRp3192
(dp3193
g60
(dp3194
sg69
g3188
sg62
(lp3195
g55
(g76
g57
NtRp3196
(dp3197
g60
(dp3198
sg69
g3192
sg62
(lp3199
g55
(g56
g57
NtRp3200
(dp3201
g60
(dp3202
g68
I4
ssg69
g3196
sg62
(lp3203
S'/admin/static/plugin_multiselect/jquery.dimensions.js'
p3204
asbasbasbag55
(g71
g57
NtRp3205
(dp3206
g60
(dp3207
sg69
g3188
sg62
(lp3208
g55
(g76
g57
NtRp3209
(dp3210
g60
(dp3211
sg69
g3205
sg62
(lp3212
g55
(g56
g57
NtRp3213
(dp3214
g60
(dp3215
g68
I4
ssg69
g3209
sg62
(lp3216
S'/admin/static/plugin_multiselect/jquery.multiselect.js'
p3217
asbasbasbag55
(g71
g57
NtRp3218
(dp3219
g60
(dp3220
sg69
g3188
sg62
(lp3221
g55
(g76
g57
NtRp3222
(dp3223
g60
(dp3224
sg69
g3218
sg62
(lp3225
g55
(g56
g57
NtRp3226
(dp3227
g60
(dp3228
g68
I4
ssg69
g3222
sg62
(lp3229
S'/admin/static/plugin_multiselect/jquery.multiselect.css'
p3230
asbasbasbag55
(g71
g57
NtRp3231
(dp3232
g60
(dp3233
sg69
g3188
sg62
(lp3234
g55
(g76
g57
NtRp3235
(dp3236
g60
(dp3237
sg69
g3231
sg62
(lp3238
g55
(g56
g57
NtRp3239
(dp3240
g60
(dp3241
g68
I4
ssg69
g3235
sg62
(lp3242
S'/admin/static/plugin_multiselect/start.js'
p3243
asbasbasbasbasbasbasbag55
(g71
g57
NtRp3244
(dp3245
g60
(dp3246
sg69
g2902
sg62
(lp3247
g55
(g76
g57
NtRp3248
(dp3249
g60
(dp3250
g80
g81
ssg69
g3244
sg62
(lp3251
S'flash'
p3252
asbag55
(g76
g57
NtRp3253
(dp3254
g60
(dp3255
g87
g88
ssg69
g3244
sg62
(lp3256
S':'
asbag55
(g76
g57
NtRp3257
(dp3258
g60
(dp3259
sg69
g3244
sg62
(lp3260
g55
(g56
g57
NtRp3261
(dp3262
g60
(dp3263
g68
I5
ssg69
g3257
sg62
(lp3264
S''
asbasbasbag55
(g71
g57
NtRp3265
(dp3266
g60
(dp3267
sg69
g2902
sg62
(lp3268
g55
(g76
g57
NtRp3269
(dp3270
g60
(dp3271
g80
g81
ssg69
g3265
sg62
(lp3272
S'generic_patterns'
p3273
asbag55
(g76
g57
NtRp3274
(dp3275
g60
(dp3276
g87
g88
ssg69
g3265
sg62
(lp3277
S':'
asbag55
(g76
g57
NtRp3278
(dp3279
g60
(dp3280
sg69
g3265
sg62
(lp3281
g55
(g56
g57
NtRp3282
(dp3283
g60
(dp3284
g68
I5
ssg69
g3278
sg62
(lp3285
g55
(g64
g57
NtRp3286
(dp3287
g60
(dp3288
g68
I4
ssg69
Nsg62
(lp3289
sbasbasbasbag55
(g71
g57
NtRp3290
(dp3291
g60
(dp3292
sg69
g2902
sg62
(lp3293
g55
(g76
g57
NtRp3294
(dp3295
g60
(dp3296
g80
g81
ssg69
g3290
sg62
(lp3297
S'headers'
p3298
asbag55
(g76
g57
NtRp3299
(dp3300
g60
(dp3301
g87
g88
ssg69
g3290
sg62
(lp3302
S':'
asbag55
(g76
g57
NtRp3303
(dp3304
g60
(dp3305
sg69
g3290
sg62
(lp3306
g55
(g56
g57
NtRp3307
(dp3308
g60
(dp3309
g68
I5
ssg69
g3303
sg62
(lp3310
g55
(g64
g57
NtRp3311
(dp3312
g60
(dp3313
g68
I4
ssg69
Nsg62
(lp3314
g55
(g71
g57
NtRp3315
(dp3316
g60
(dp3317
sg69
g3311
sg62
(lp3318
g55
(g76
g57
NtRp3319
(dp3320
g60
(dp3321
g80
g81
ssg69
g3315
sg62
(lp3322
S'Cache-Control'
p3323
asbag55
(g76
g57
NtRp3324
(dp3325
g60
(dp3326
g87
g88
ssg69
g3315
sg62
(lp3327
S':'
asbag55
(g76
g57
NtRp3328
(dp3329
g60
(dp3330
sg69
g3315
sg62
(lp3331
g55
(g56
g57
NtRp3332
(dp3333
g60
(dp3334
g68
I4
ssg69
g3328
sg62
(lp3335
S'no-store, no-cache, must-revalidate, post-check=0, pre-check=0'
p3336
asbasbasbag55
(g71
g57
NtRp3337
(dp3338
g60
(dp3339
sg69
g3311
sg62
(lp3340
g55
(g76
g57
NtRp3341
(dp3342
g60
(dp3343
g80
g81
ssg69
g3337
sg62
(lp3344
S'Content-Type'
p3345
asbag55
(g76
g57
NtRp3346
(dp3347
g60
(dp3348
g87
g88
ssg69
g3337
sg62
(lp3349
S':'
asbag55
(g76
g57
NtRp3350
(dp3351
g60
(dp3352
sg69
g3337
sg62
(lp3353
g55
(g56
g57
NtRp3354
(dp3355
g60
(dp3356
g68
I4
ssg69
g3350
sg62
(lp3357
S'text/html; charset=utf-8'
p3358
asbasbasbag55
(g71
g57
NtRp3359
(dp3360
g60
(dp3361
sg69
g3311
sg62
(lp3362
g55
(g76
g57
NtRp3363
(dp3364
g60
(dp3365
g80
g81
ssg69
g3359
sg62
(lp3366
S'Expires'
p3367
asbag55
(g76
g57
NtRp3368
(dp3369
g60
(dp3370
g87
g88
ssg69
g3359
sg62
(lp3371
S':'
asbag55
(g76
g57
NtRp3372
(dp3373
g60
(dp3374
sg69
g3359
sg62
(lp3375
g55
(g56
g57
NtRp3376
(dp3377
g60
(dp3378
g68
I4
ssg69
g3372
sg62
(lp3379
S'Wed, 21 Mar 2012 20:18:22 GMT'
p3380
asbasbasbag55
(g71
g57
NtRp3381
(dp3382
g60
(dp3383
sg69
g3311
sg62
(lp3384
g55
(g76
g57
NtRp3385
(dp3386
g60
(dp3387
g80
g81
ssg69
g3381
sg62
(lp3388
S'Pragma'
p3389
asbag55
(g76
g57
NtRp3390
(dp3391
g60
(dp3392
g87
g88
ssg69
g3381
sg62
(lp3393
S':'
asbag55
(g76
g57
NtRp3394
(dp3395
g60
(dp3396
sg69
g3381
sg62
(lp3397
g55
(g56
g57
NtRp3398
(dp3399
g60
(dp3400
g68
I4
ssg69
g3394
sg62
(lp3401
S'no-cache'
p3402
asbasbasbag55
(g71
g57
NtRp3403
(dp3404
g60
(dp3405
sg69
g3311
sg62
(lp3406
g55
(g76
g57
NtRp3407
(dp3408
g60
(dp3409
g80
g81
ssg69
g3403
sg62
(lp3410
S'X-Powered-By'
p3411
asbag55
(g76
g57
NtRp3412
(dp3413
g60
(dp3414
g87
g88
ssg69
g3403
sg62
(lp3415
S':'
asbag55
(g76
g57
NtRp3416
(dp3417
g60
(dp3418
sg69
g3403
sg62
(lp3419
g55
(g56
g57
NtRp3420
(dp3421
g60
(dp3422
g68
I4
ssg69
g3416
sg62
(lp3423
S'web2py'
p3424
asbasbasbasbasbasbasbag55
(g71
g57
NtRp3425
(dp3426
g60
(dp3427
sg69
g2902
sg62
(lp3428
g55
(g76
g57
NtRp3429
(dp3430
g60
(dp3431
g80
g81
ssg69
g3425
sg62
(lp3432
S'menu'
p3433
asbag55
(g76
g57
NtRp3434
(dp3435
g60
(dp3436
g87
g88
ssg69
g3425
sg62
(lp3437
S':'
asbag55
(g76
g57
NtRp3438
(dp3439
g60
(dp3440
sg69
g3425
sg62
(lp3441
g55
(g56
g57
NtRp3442
(dp3443
g60
(dp3444
g68
I5
ssg69
g3438
sg62
(lp3445
g55
(g64
g57
NtRp3446
(dp3447
g60
(dp3448
g68
I4
ssg69
Nsg62
(lp3449
g55
(g71
g57
NtRp3450
(dp3451
g60
(dp3452
sg69
g3446
sg62
(lp3453
g55
(g76
g57
NtRp3454
(dp3455
g60
(dp3456
sg69
g3450
sg62
(lp3457
g55
(g56
g57
NtRp3458
(dp3459
g60
(dp3460
g68
I4
ssg69
g3454
sg62
(lp3461
g55
(g64
g57
NtRp3462
(dp3463
g60
(dp3464
g68
I3
ssg69
Nsg62
(lp3465
g55
(g71
g57
NtRp3466
(dp3467
g60
(dp3468
sg69
g3462
sg62
(lp3469
g55
(g76
g57
NtRp3470
(dp3471
g60
(dp3472
sg69
g3466
sg62
(lp3473
g55
(g56
g57
NtRp3474
(dp3475
g60
(dp3476
g68
I3
ssg69
g3470
sg62
(lp3477
cgluon.languages
lazyT_unpickle
p3478
(S't\x05\x00\x00\x00sitio'
tRp3479
asbasbasbag55
(g71
g57
NtRp3480
(dp3481
g60
(dp3482
sg69
g3462
sg62
(lp3483
g55
(g76
g57
NtRp3484
(dp3485
g60
(dp3486
sg69
g3480
sg62
(lp3487
g55
(g56
g57
NtRp3488
(dp3489
g60
(dp3490
g68
I3
ssg69
g3484
sg62
(lp3491
g98
asbasbasbag55
(g71
g57
NtRp3492
(dp3493
g60
(dp3494
sg69
g3462
sg62
(lp3495
g55
(g76
g57
NtRp3496
(dp3497
g60
(dp3498
sg69
g3492
sg62
(lp3499
g55
(g56
g57
NtRp3500
(dp3501
g60
(dp3502
g68
I3
ssg69
g3496
sg62
(lp3503
S'/admin/default/site'
p3504
asbasbasbasbasbasbasbag55
(g71
g57
NtRp3505
(dp3506
g60
(dp3507
sg69
g3446
sg62
(lp3508
g55
(g76
g57
NtRp3509
(dp3510
g60
(dp3511
sg69
g3505
sg62
(lp3512
g55
(g56
g57
NtRp3513
(dp3514
g60
(dp3515
g68
I4
ssg69
g3509
sg62
(lp3516
g55
(g64
g57
NtRp3517
(dp3518
g60
(dp3519
g68
I3
ssg69
Nsg62
(lp3520
g55
(g71
g57
NtRp3521
(dp3522
g60
(dp3523
sg69
g3517
sg62
(lp3524
g55
(g76
g57
NtRp3525
(dp3526
g60
(dp3527
sg69
g3521
sg62
(lp3528
g55
(g56
g57
NtRp3529
(dp3530
g60
(dp3531
g68
I3
ssg69
g3525
sg62
(lp3532
g3478
(S't\x06\x00\x00\x00editar'
tRp3533
asbasbasbag55
(g71
g57
NtRp3534
(dp3535
g60
(dp3536
sg69
g3517
sg62
(lp3537
g55
(g76
g57
NtRp3538
(dp3539
g60
(dp3540
sg69
g3534
sg62
(lp3541
g55
(g56
g57
NtRp3542
(dp3543
g60
(dp3544
g68
I3
ssg69
g3538
sg62
(lp3545
g1363
asbasbasbag55
(g71
g57
NtRp3546
(dp3547
g60
(dp3548
sg69
g3517
sg62
(lp3549
g55
(g76
g57
NtRp3550
(dp3551
g60
(dp3552
sg69
g3546
sg62
(lp3553
g55
(g56
g57
NtRp3554
(dp3555
g60
(dp3556
g68
I3
ssg69
g3550
sg62
(lp3557
S'/admin/default/design/parleyweb'
p3558
asbasbasbasbasbasbasbag55
(g71
g57
NtRp3559
(dp3560
g60
(dp3561
sg69
g3446
sg62
(lp3562
g55
(g76
g57
NtRp3563
(dp3564
g60
(dp3565
sg69
g3559
sg62
(lp3566
g55
(g56
g57
NtRp3567
(dp3568
g60
(dp3569
g68
I4
ssg69
g3563
sg62
(lp3570
g55
(g64
g57
NtRp3571
(dp3572
g60
(dp3573
g68
I3
ssg69
Nsg62
(lp3574
g55
(g71
g57
NtRp3575
(dp3576
g60
(dp3577
sg69
g3571
sg62
(lp3578
g55
(g76
g57
NtRp3579
(dp3580
g60
(dp3581
sg69
g3575
sg62
(lp3582
g55
(g56
g57
NtRp3583
(dp3584
g60
(dp3585
g68
I3
ssg69
g3579
sg62
(lp3586
g3478
(S's\t\x00\x00\x00acerca de'
tRp3587
asbasbasbag55
(g71
g57
NtRp3588
(dp3589
g60
(dp3590
sg69
g3571
sg62
(lp3591
g55
(g76
g57
NtRp3592
(dp3593
g60
(dp3594
sg69
g3588
sg62
(lp3595
g55
(g56
g57
NtRp3596
(dp3597
g60
(dp3598
g68
I3
ssg69
g3592
sg62
(lp3599
g98
asbasbasbag55
(g71
g57
NtRp3600
(dp3601
g60
(dp3602
sg69
g3571
sg62
(lp3603
g55
(g76
g57
NtRp3604
(dp3605
g60
(dp3606
sg69
g3600
sg62
(lp3607
g55
(g56
g57
NtRp3608
(dp3609
g60
(dp3610
g68
I3
ssg69
g3604
sg62
(lp3611
S'/admin/default/about/parleyweb'
p3612
asbasbasbasbasbasbasbag55
(g71
g57
NtRp3613
(dp3614
g60
(dp3615
sg69
g3446
sg62
(lp3616
g55
(g76
g57
NtRp3617
(dp3618
g60
(dp3619
sg69
g3613
sg62
(lp3620
g55
(g56
g57
NtRp3621
(dp3622
g60
(dp3623
g68
I4
ssg69
g3617
sg62
(lp3624
g55
(g64
g57
NtRp3625
(dp3626
g60
(dp3627
g68
I3
ssg69
Nsg62
(lp3628
g55
(g71
g57
NtRp3629
(dp3630
g60
(dp3631
sg69
g3625
sg62
(lp3632
g55
(g76
g57
NtRp3633
(dp3634
g60
(dp3635
sg69
g3629
sg62
(lp3636
g55
(g56
g57
NtRp3637
(dp3638
g60
(dp3639
g68
I3
ssg69
g3633
sg62
(lp3640
g3478
(S't\x07\x00\x00\x00errores'
tRp3641
asbasbasbag55
(g71
g57
NtRp3642
(dp3643
g60
(dp3644
sg69
g3625
sg62
(lp3645
g55
(g76
g57
NtRp3646
(dp3647
g60
(dp3648
sg69
g3642
sg62
(lp3649
g55
(g56
g57
NtRp3650
(dp3651
g60
(dp3652
g68
I3
ssg69
g3646
sg62
(lp3653
g98
asbasbasbag55
(g71
g57
NtRp3654
(dp3655
g60
(dp3656
sg69
g3625
sg62
(lp3657
g55
(g76
g57
NtRp3658
(dp3659
g60
(dp3660
sg69
g3654
sg62
(lp3661
g55
(g56
g57
NtRp3662
(dp3663
g60
(dp3664
g68
I3
ssg69
g3658
sg62
(lp3665
S'/admin/default/errors/parleyweb'
p3666
asbasbasbasbasbasbasbag55
(g71
g57
NtRp3667
(dp3668
g60
(dp3669
sg69
g3446
sg62
(lp3670
g55
(g76
g57
NtRp3671
(dp3672
g60
(dp3673
sg69
g3667
sg62
(lp3674
g55
(g56
g57
NtRp3675
(dp3676
g60
(dp3677
g68
I4
ssg69
g3671
sg62
(lp3678
g55
(g64
g57
NtRp3679
(dp3680
g60
(dp3681
g68
I3
ssg69
Nsg62
(lp3682
g55
(g71
g57
NtRp3683
(dp3684
g60
(dp3685
sg69
g3679
sg62
(lp3686
g55
(g76
g57
NtRp3687
(dp3688
g60
(dp3689
sg69
g3683
sg62
(lp3690
g55
(g56
g57
NtRp3691
(dp3692
g60
(dp3693
g68
I3
ssg69
g3687
sg62
(lp3694
g3478
(S't\n\x00\x00\x00Versioning'
tRp3695
asbasbasbag55
(g71
g57
NtRp3696
(dp3697
g60
(dp3698
sg69
g3679
sg62
(lp3699
g55
(g76
g57
NtRp3700
(dp3701
g60
(dp3702
sg69
g3696
sg62
(lp3703
g55
(g56
g57
NtRp3704
(dp3705
g60
(dp3706
g68
I3
ssg69
g3700
sg62
(lp3707
g98
asbasbasbag55
(g71
g57
NtRp3708
(dp3709
g60
(dp3710
sg69
g3679
sg62
(lp3711
g55
(g76
g57
NtRp3712
(dp3713
g60
(dp3714
sg69
g3708
sg62
(lp3715
g55
(g56
g57
NtRp3716
(dp3717
g60
(dp3718
g68
I3
ssg69
g3712
sg62
(lp3719
S'/admin/mercurial/commit/parleyweb'
p3720
asbasbasbasbasbasbasbag55
(g71
g57
NtRp3721
(dp3722
g60
(dp3723
sg69
g3446
sg62
(lp3724
g55
(g76
g57
NtRp3725
(dp3726
g60
(dp3727
sg69
g3721
sg62
(lp3728
g55
(g56
g57
NtRp3729
(dp3730
g60
(dp3731
g68
I4
ssg69
g3725
sg62
(lp3732
g55
(g64
g57
NtRp3733
(dp3734
g60
(dp3735
g68
I3
ssg69
Nsg62
(lp3736
g55
(g71
g57
NtRp3737
(dp3738
g60
(dp3739
sg69
g3733
sg62
(lp3740
g55
(g76
g57
NtRp3741
(dp3742
g60
(dp3743
sg69
g3737
sg62
(lp3744
g55
(g56
g57
NtRp3745
(dp3746
g60
(dp3747
g68
I3
ssg69
g3741
sg62
(lp3748
g3478
(S's\x0e\x00\x00\x00fin de sesi\xc3\xb3n'
tRp3749
asbasbasbag55
(g71
g57
NtRp3750
(dp3751
g60
(dp3752
sg69
g3733
sg62
(lp3753
g55
(g76
g57
NtRp3754
(dp3755
g60
(dp3756
sg69
g3750
sg62
(lp3757
g55
(g56
g57
NtRp3758
(dp3759
g60
(dp3760
g68
I3
ssg69
g3754
sg62
(lp3761
g98
asbasbasbag55
(g71
g57
NtRp3762
(dp3763
g60
(dp3764
sg69
g3733
sg62
(lp3765
g55
(g76
g57
NtRp3766
(dp3767
g60
(dp3768
sg69
g3762
sg62
(lp3769
g55
(g56
g57
NtRp3770
(dp3771
g60
(dp3772
g68
I3
ssg69
g3766
sg62
(lp3773
S'/admin/default/logout'
p3774
asbasbasbasbasbasbasbag55
(g71
g57
NtRp3775
(dp3776
g60
(dp3777
sg69
g3446
sg62
(lp3778
g55
(g76
g57
NtRp3779
(dp3780
g60
(dp3781
sg69
g3775
sg62
(lp3782
g55
(g56
g57
NtRp3783
(dp3784
g60
(dp3785
g68
I4
ssg69
g3779
sg62
(lp3786
g55
(g64
g57
NtRp3787
(dp3788
g60
(dp3789
g68
I3
ssg69
Nsg62
(lp3790
g55
(g71
g57
NtRp3791
(dp3792
g60
(dp3793
sg69
g3787
sg62
(lp3794
g55
(g76
g57
NtRp3795
(dp3796
g60
(dp3797
sg69
g3791
sg62
(lp3798
g55
(g56
g57
NtRp3799
(dp3800
g60
(dp3801
g68
I3
ssg69
g3795
sg62
(lp3802
g3478
(S't\x05\x00\x00\x00Debug'
tRp3803
asbasbasbag55
(g71
g57
NtRp3804
(dp3805
g60
(dp3806
sg69
g3787
sg62
(lp3807
g55
(g76
g57
NtRp3808
(dp3809
g60
(dp3810
sg69
g3804
sg62
(lp3811
g55
(g56
g57
NtRp3812
(dp3813
g60
(dp3814
g68
I3
ssg69
g3808
sg62
(lp3815
g98
asbasbasbag55
(g71
g57
NtRp3816
(dp3817
g60
(dp3818
sg69
g3787
sg62
(lp3819
g55
(g76
g57
NtRp3820
(dp3821
g60
(dp3822
sg69
g3816
sg62
(lp3823
g55
(g56
g57
NtRp3824
(dp3825
g60
(dp3826
g68
I3
ssg69
g3820
sg62
(lp3827
S'/admin/debug/interact'
p3828
asbasbasbasbasbasbasbag55
(g71
g57
NtRp3829
(dp3830
g60
(dp3831
sg69
g3446
sg62
(lp3832
g55
(g76
g57
NtRp3833
(dp3834
g60
(dp3835
sg69
g3829
sg62
(lp3836
g55
(g56
g57
NtRp3837
(dp3838
g60
(dp3839
g68
I4
ssg69
g3833
sg62
(lp3840
g55
(g64
g57
NtRp3841
(dp3842
g60
(dp3843
g68
I3
ssg69
Nsg62
(lp3844
g55
(g71
g57
NtRp3845
(dp3846
g60
(dp3847
sg69
g3841
sg62
(lp3848
g55
(g76
g57
NtRp3849
(dp3850
g60
(dp3851
sg69
g3845
sg62
(lp3852
g55
(g56
g57
NtRp3853
(dp3854
g60
(dp3855
g68
I3
ssg69
g3849
sg62
(lp3856
g3478
(S't\x05\x00\x00\x00ayuda'
tRp3857
asbasbasbag55
(g71
g57
NtRp3858
(dp3859
g60
(dp3860
sg69
g3841
sg62
(lp3861
g55
(g76
g57
NtRp3862
(dp3863
g60
(dp3864
sg69
g3858
sg62
(lp3865
g55
(g56
g57
NtRp3866
(dp3867
g60
(dp3868
g68
I3
ssg69
g3862
sg62
(lp3869
g98
asbasbasbag55
(g71
g57
NtRp3870
(dp3871
g60
(dp3872
sg69
g3841
sg62
(lp3873
g55
(g76
g57
NtRp3874
(dp3875
g60
(dp3876
sg69
g3870
sg62
(lp3877
g55
(g56
g57
NtRp3878
(dp3879
g60
(dp3880
g68
I3
ssg69
g3874
sg62
(lp3881
S'http://web2py.com/examples'
p3882
asbasbasbasbasbasbasbasbasbasbasbag55
(g71
g57
NtRp3883
(dp3884
g60
(dp3885
sg69
g2902
sg62
(lp3886
g55
(g76
g57
NtRp3887
(dp3888
g60
(dp3889
g80
g81
ssg69
g3883
sg62
(lp3890
S'meta'
p3891
asbag55
(g76
g57
NtRp3892
(dp3893
g60
(dp3894
g87
g88
ssg69
g3883
sg62
(lp3895
S':'
asbag55
(g76
g57
NtRp3896
(dp3897
g60
(dp3898
sg69
g3883
sg62
(lp3899
g55
(g56
g57
NtRp3900
(dp3901
g60
(dp3902
g68
I5
ssg69
g3896
sg62
(lp3903
g55
(g64
g57
NtRp3904
(dp3905
g60
(dp3906
g68
I4
ssg69
Nsg62
(lp3907
sbasbasbasbag55
(g71
g57
NtRp3908
(dp3909
g60
(dp3910
sg69
g2902
sg62
(lp3911
g55
(g76
g57
NtRp3912
(dp3913
g60
(dp3914
g80
g81
ssg69
g3908
sg62
(lp3915
S'postprocessing'
p3916
asbag55
(g76
g57
NtRp3917
(dp3918
g60
(dp3919
g87
g88
ssg69
g3908
sg62
(lp3920
S':'
asbag55
(g76
g57
NtRp3921
(dp3922
g60
(dp3923
sg69
g3908
sg62
(lp3924
g55
(g56
g57
NtRp3925
(dp3926
g60
(dp3927
g68
I5
ssg69
g3921
sg62
(lp3928
g55
(g64
g57
NtRp3929
(dp3930
g60
(dp3931
g68
I4
ssg69
Nsg62
(lp3932
sbasbasbasbag55
(g71
g57
NtRp3933
(dp3934
g60
(dp3935
sg69
g2902
sg62
(lp3936
g55
(g76
g57
NtRp3937
(dp3938
g60
(dp3939
g80
g81
ssg69
g3933
sg62
(lp3940
S'session_file'
p3941
asbag55
(g76
g57
NtRp3942
(dp3943
g60
(dp3944
g87
g88
ssg69
g3933
sg62
(lp3945
S':'
asbag55
(g76
g57
NtRp3946
(dp3947
g60
(dp3948
sg69
g3933
sg62
(lp3949
g55
(g56
g57
NtRp3950
(dp3951
g60
(dp3952
g68
I5
ssg69
g3946
sg62
(lp3953
S"<open file 'D:\\Dise\xf1o Web\\Proyectos\\Parleyweb\\web2py\\applications\\admin\\sessions\\127.0.0.1-37b42d20-ebbb-45eb-85f7-127f903fe69a', mode 'rb+' at 0x06880800>"
p3954
asbasbasbag55
(g71
g57
NtRp3955
(dp3956
g60
(dp3957
sg69
g2902
sg62
(lp3958
g55
(g76
g57
NtRp3959
(dp3960
g60
(dp3961
g80
g81
ssg69
g3955
sg62
(lp3962
S'session_filename'
p3963
asbag55
(g76
g57
NtRp3964
(dp3965
g60
(dp3966
g87
g88
ssg69
g3955
sg62
(lp3967
S':'
asbag55
(g76
g57
NtRp3968
(dp3969
g60
(dp3970
sg69
g3955
sg62
(lp3971
g55
(g56
g57
NtRp3972
(dp3973
g60
(dp3974
g68
I5
ssg69
g3968
sg62
(lp3975
S'D:\\Dise\xf1o Web\\Proyectos\\Parleyweb\\web2py\\applications\\admin\\sessions\\127.0.0.1-37b42d20-ebbb-45eb-85f7-127f903fe69a'
p3976
asbasbasbag55
(g71
g57
NtRp3977
(dp3978
g60
(dp3979
sg69
g2902
sg62
(lp3980
g55
(g76
g57
NtRp3981
(dp3982
g60
(dp3983
g80
g81
ssg69
g3977
sg62
(lp3984
S'session_id'
p3985
asbag55
(g76
g57
NtRp3986
(dp3987
g60
(dp3988
g87
g88
ssg69
g3977
sg62
(lp3989
S':'
asbag55
(g76
g57
NtRp3990
(dp3991
g60
(dp3992
sg69
g3977
sg62
(lp3993
g55
(g56
g57
NtRp3994
(dp3995
g60
(dp3996
g68
I5
ssg69
g3990
sg62
(lp3997
S'127.0.0.1-37b42d20-ebbb-45eb-85f7-127f903fe69a'
p3998
asbasbasbag55
(g71
g57
NtRp3999
(dp4000
g60
(dp4001
sg69
g2902
sg62
(lp4002
g55
(g76
g57
NtRp4003
(dp4004
g60
(dp4005
g80
g81
ssg69
g3999
sg62
(lp4006
S'session_id_name'
p4007
asbag55
(g76
g57
NtRp4008
(dp4009
g60
(dp4010
g87
g88
ssg69
g3999
sg62
(lp4011
S':'
asbag55
(g76
g57
NtRp4012
(dp4013
g60
(dp4014
sg69
g3999
sg62
(lp4015
g55
(g56
g57
NtRp4016
(dp4017
g60
(dp4018
g68
I5
ssg69
g4012
sg62
(lp4019
g2959
asbasbasbag55
(g71
g57
NtRp4020
(dp4021
g60
(dp4022
sg69
g2902
sg62
(lp4023
g55
(g76
g57
NtRp4024
(dp4025
g60
(dp4026
g80
g81
ssg69
g4020
sg62
(lp4027
S'session_locked'
p4028
asbag55
(g76
g57
NtRp4029
(dp4030
g60
(dp4031
g87
g88
ssg69
g4020
sg62
(lp4032
S':'
asbag55
(g76
g57
NtRp4033
(dp4034
g60
(dp4035
sg69
g4020
sg62
(lp4036
g55
(g56
g57
NtRp4037
(dp4038
g60
(dp4039
g68
I5
ssg69
g4033
sg62
(lp4040
g1363
asbasbasbag55
(g71
g57
NtRp4041
(dp4042
g60
(dp4043
sg69
g2902
sg62
(lp4044
g55
(g76
g57
NtRp4045
(dp4046
g60
(dp4047
g80
g81
ssg69
g4041
sg62
(lp4048
S'session_new'
p4049
asbag55
(g76
g57
NtRp4050
(dp4051
g60
(dp4052
g87
g88
ssg69
g4041
sg62
(lp4053
S':'
asbag55
(g76
g57
NtRp4054
(dp4055
g60
(dp4056
sg69
g4041
sg62
(lp4057
g55
(g56
g57
NtRp4058
(dp4059
g60
(dp4060
g68
I5
ssg69
g4054
sg62
(lp4061
g98
asbasbasbag55
(g71
g57
NtRp4062
(dp4063
g60
(dp4064
sg69
g2902
sg62
(lp4065
g55
(g76
g57
NtRp4066
(dp4067
g60
(dp4068
g80
g81
ssg69
g4062
sg62
(lp4069
S'status'
p4070
asbag55
(g76
g57
NtRp4071
(dp4072
g60
(dp4073
g87
g88
ssg69
g4062
sg62
(lp4074
S':'
asbag55
(g76
g57
NtRp4075
(dp4076
g60
(dp4077
sg69
g4062
sg62
(lp4078
g55
(g56
g57
NtRp4079
(dp4080
g60
(dp4081
g68
I5
ssg69
g4075
sg62
(lp4082
S'200'
p4083
asbasbasbag55
(g71
g57
NtRp4084
(dp4085
g60
(dp4086
sg69
g2902
sg62
(lp4087
g55
(g76
g57
NtRp4088
(dp4089
g60
(dp4090
g80
g81
ssg69
g4084
sg62
(lp4091
S'subtitle'
p4092
asbag55
(g76
g57
NtRp4093
(dp4094
g60
(dp4095
g87
g88
ssg69
g4084
sg62
(lp4096
S':'
asbag55
(g76
g57
NtRp4097
(dp4098
g60
(dp4099
sg69
g4084
sg62
(lp4100
g55
(g56
g57
NtRp4101
(dp4102
g60
(dp4103
g68
I5
ssg69
g4097
sg62
(lp4104
S'admin'
p4105
asbasbasbag55
(g71
g57
NtRp4106
(dp4107
g60
(dp4108
sg69
g2902
sg62
(lp4109
g55
(g76
g57
NtRp4110
(dp4111
g60
(dp4112
g80
g81
ssg69
g4106
sg62
(lp4113
S'title'
p4114
asbag55
(g76
g57
NtRp4115
(dp4116
g60
(dp4117
g87
g88
ssg69
g4106
sg62
(lp4118
S':'
asbag55
(g76
g57
NtRp4119
(dp4120
g60
(dp4121
sg69
g4106
sg62
(lp4122
g55
(g56
g57
NtRp4123
(dp4124
g60
(dp4125
g68
I5
ssg69
g4119
sg62
(lp4126
S'design parleyweb'
p4127
asbasbasbag55
(g71
g57
NtRp4128
(dp4129
g60
(dp4130
sg69
g2902
sg62
(lp4131
g55
(g76
g57
NtRp4132
(dp4133
g60
(dp4134
g80
g81
ssg69
g4128
sg62
(lp4135
g2049
asbag55
(g76
g57
NtRp4136
(dp4137
g60
(dp4138
g87
g88
ssg69
g4128
sg62
(lp4139
S':'
asbag55
(g76
g57
NtRp4140
(dp4141
g60
(dp4142
sg69
g4128
sg62
(lp4143
g55
(g56
g57
NtRp4144
(dp4145
g60
(dp4146
g68
I5
ssg69
g4140
sg62
(lp4147
g2062
asbasbasbag55
(g71
g57
NtRp4148
(dp4149
g60
(dp4150
sg69
g2902
sg62
(lp4151
g55
(g76
g57
NtRp4152
(dp4153
g60
(dp4154
g80
g81
ssg69
g4148
sg62
(lp4155
S'view'
p4156
asbag55
(g76
g57
NtRp4157
(dp4158
g60
(dp4159
g87
g88
ssg69
g4148
sg62
(lp4160
S':'
asbag55
(g76
g57
NtRp4161
(dp4162
g60
(dp4163
sg69
g4148
sg62
(lp4164
g55
(g56
g57
NtRp4165
(dp4166
g60
(dp4167
g68
I5
ssg69
g4161
sg62
(lp4168
S'default/design.html'
p4169
asbasbasbasbasbsS'locals'
p4170
(dp4171
S'languages'
p4172
S'[]'
p4173
sS'cronfolder'
p4174
S"'D:/Dise\\xf1o Web/Proyectos/Parleyweb/web2py/applications/parleyweb/cron'"
p4175
sS'extend'
p4176
g45
sS'views'
p4177
S'[]'
p4178
sS'models'
p4179
S'[]'
p4180
sS'app'
p4181
S"'parleyweb'"
p4182
sS'functions'
p4183
g45
sS'modules'
p4184
S'[]'
p4185
sS'statics'
p4186
S'[]'
p4187
sS'controllers'
p4188
S'[]'
p4189
sS'include'
p4190
g45
sS'defines'
p4191
g45
sssS'traceback'
p4192
S'Traceback (most recent call last):\n  File "gluon/restricted.py", line 205, in restricted\n  File "D:\\Dise\xf1o Web\\Proyectos\\Parleyweb\\web2py\\applications\\admin\\controllers/default.py", line 1352, in <module>\n  File "gluon/globals.py", line 173, in <lambda>\n  File "D:\\Dise\xf1o Web\\Proyectos\\Parleyweb\\web2py\\applications\\admin\\controllers/default.py", line 760, in design\nWindowsError: [Error 3] El sistema no puede encontrar la ruta especificada: \'D:/Dise\\xf1o Web/Proyectos/Parleyweb/web2py/applications/parleyweb/cron\'\n'
p4193
s.